#textdomain wesnoth-Vaelia_Random_Adventures

## Mines

#define WORLD_CONQUEST_TEK_MAP_POSTGENERATION_4C
    [event]
        name=prestart
        {WORLD_CONQUEST_TEK_MAP_NOISE_CLASSIC Gs^Fp}
        {WORLD_CONQUEST_TEK_MAP_REPAINT_4C}
        {WCT_MAP_4C_POST_BUNUS_DECORATION}
    [/event]
    [event]
        name=start
        {CLEAR_VARIABLE wcii}
    [/event]
#enddef

#define WORLD_CONQUEST_TEK_MAP_REPAINT_4C
    ## cave path to chasm with bridge
    {VRA_SCATTER_FILTER_ALL (
        terrain=Ur
    ) "(Qxu^Bs|,Qxu^Bs\,Qxu^Bs/,Qxu^Bh|,Qxu^Bh\,Qxu^Bh/,Qxu,Qxu^Bs|,Qxu^Bs\,Qxu^Bs/,Qxu)"}
    {WORLD_CONQUEST_TEK_MAP_REBUILD (Uu^Br/,Uu^Br\,Uu^Br|) 2}
    [terrain]
        terrain=Xu
        [and]
            terrain=Mm^Xm
            [filter_adjacent_location]
                terrain=Mv
                count=0
                adjacent=n,ne,nw
            [/filter_adjacent_location]
        [/and]
    [/terrain]
    {WCT_REDUCE_WALL_CLUSTERS (Uu^Br/,Uu^Br\,Uu^Br|,Uu^`Dr,Qxu)}
    {WORLD_CONQUEST_TEK_MAP_DECORATION_4C}
    {WCT_FILL_LAVA_CHASMS}
    {WORLD_CONQUEST_TEK_MAP_DIRT (Gg^Uf,Gg^Uf,Gs^Uf)}
#enddef

#define WORLD_CONQUEST_TEK_MAP_DECORATION_4C
    {WCT_MAP_CHASM_BRIDGES_DIRECTION}
    {WCT_MAP_4C_CONECT_RAILS}
    ## rails on grass
    {VRA_SCATTER_FILTER_FRAC_RAND (
        terrain=Gs,Gg
        [filter_adjacent_location]
            terrain=Uu^Br*,U*^V*
            adjacent=ne,sw
        [/filter_adjacent_location]
    ) "Gd^Br/" "1..2"}
    {VRA_SCATTER_FILTER_FRAC_RAND (
        terrain=Gs,Gg
        [filter_adjacent_location]
            terrain=Uu^Br*,U*^V*
            adjacent=n,s
        [/filter_adjacent_location]
    ) "Gd^Br|" "1..2"}
    {VRA_SCATTER_FILTER_FRAC_RAND (
        terrain=Gs,Gg
        [filter_adjacent_location]
            terrain=Uu^Br*,U*^V*
            adjacent=nw,se
        [/filter_adjacent_location]
    ) "Gd^Br\" "1..2"}
    ## add some rubble
    {VRA_SCATTER_FILTER_FRACTION (
        terrain=Uh
        [filter_adjacent_location]
            terrain=U*^V*,Q*^B*
        [/filter_adjacent_location]
    ) "Uu^Dr,Uu^Dr,Uu^Dr,Uu^Dr,Uu^Dr,Uu^Dr,Uh^Dr,Uh,Uh" 2}
    {VRA_SCATTER_FILTER_ALL (
        terrain=Uh
        [and]
            terrain=*^Br*
            radius=2
        [/and]
    ) "Uu^Dr,Uu^Dr,Uu^Dr,Uu^Dr,Uu^Dr,Uu^Dr,Uh^Dr,Uh,Uh,Uh,Uh,Uh,Uh,Uh,Uh,Uh,Uh"}
    {VRA_SCATTER_FILTER_FRACTION (
        terrain=Hh,Hh^F*
        [filter_adjacent_location]
            terrain=U*^V*,*^Br*,Q*^B*
        [/filter_adjacent_location]
    ) "(Hh^Dr,Gd^Dr,Gd^Dr,Gs^Dr,Gs^Dr,Gg^Dr)" 2}
    ## change walls look
    [terrain]
        terrain=Xuc
        [and]
            terrain=Xu
        [/and]
    [/terrain]
    [terrain]
        terrain=Mm^Xm
        [and]
            terrain=Xuc
        [/and]
        [not]
            terrain=U*^*,Q*^*
            radius=3
        [/not]
    [/terrain]
    ## change forests look
    {VRA_SCATTER_FILTER_FRACTION (
        terrain=*^Fp
    ) "*^Fms" 2 LAYER="overlay"}
    {VRA_SCATTER_FILTER_FRACTION (
        terrain=*^Fp
    ) "*^Fds" 2 LAYER="overlay"}
    {VRA_SCATTER_FILTER_FRACTION (
        terrain=*^Ft
    ) "*^Ftp" 2 LAYER="overlay"}
    [terrain]
        terrain=Hh^Ftd
        [and]
            terrain=Hh^Ft
        [/and]
    [/terrain]
    [terrain]
        terrain=Gg^Ftr
        [and]
            terrain=G*^Ft
        [/and]
    [/terrain]
    ## fix villages
    [terrain]
        terrain=Gs^Vd
        [and]
            terrain=G*^Vht
        [/and]
    [/terrain]
    [terrain]
        terrain=*^Vud
        layer=overlay
        [and]
            terrain=*^Vu
        [/and]
    [/terrain]
    [terrain]
        terrain=Gs
        layer=base
        [and]
            terrain=Gg^*
        [/and]
        [filter_adjacent_location]
            terrain=Gd^*
        [/filter_adjacent_location]
    [/terrain]
    ## stones near rails
    {VRA_SCATTER_FILTER_FRAC_RAND (
        terrain=G*,Hh
        [filter_adjacent_location]
            terrain=*^Br*
        [/filter_adjacent_location]
    ) "*^Es" "1..2" LAYER="overlay"}
    {RANDOM 0..19}
    [if]
        {VARIABLE_CONDITIONAL random equals 0}
        [then]
            {WCT_CHANGE_MAP_WATER t}
        [/then]
    [/if]
#enddef

#define WCT_MAP_CHASM_BRIDGES_DIRECTION
    {VRA_SCATTER_FILTER_FRACTION (
        terrain=Q*^Bs|,Q*^Bh|
        [filter_adjacent_location]
            terrain=Q*^*,X*
            adjacent=n,s
            count=1-2
        [/filter_adjacent_location]
        [filter_adjacent_location]
            terrain=Q*^*,X*
            adjacent=ne,sw
            count=0
        [/filter_adjacent_location]
    ) "(Q*^Bs/,Q*^Bs/,Q*^Bh/)" 1 LAYER="overlay"}
    {VRA_SCATTER_FILTER_FRACTION (
        terrain=Q*^Bs|,Q*^Bh|
        [filter_adjacent_location]
            terrain=Q*^*,X*
            adjacent=n,s
            count=1-2
        [/filter_adjacent_location]
        [filter_adjacent_location]
            terrain=Q*^*,X*
            adjacent=nw,se
            count=0
        [/filter_adjacent_location]
    ) "(Q*^Bs\,Q*^Bs\,Q*^Bh\)" 1 LAYER="overlay"}
    {VRA_SCATTER_FILTER_FRACTION (
        terrain=Q*^Bs/,Q*^Bh/
        [filter_adjacent_location]
            terrain=Q*^*,X*
            adjacent=ne,sw
            count=1-2
        [/filter_adjacent_location]
        [filter_adjacent_location]
            terrain=Q*^*,X*
            adjacent=n,s
            count=0
        [/filter_adjacent_location]
    ) "(Q*^Bs|,Q*^Bs|,Q*^Bh|)" 1 LAYER="overlay"}
    {VRA_SCATTER_FILTER_FRACTION (
        terrain=Q*^Bs/,Q*^Bh/
        [filter_adjacent_location]
            terrain=Q*^*,X*
            adjacent=ne,sw
            count=1-2
        [/filter_adjacent_location]
        [filter_adjacent_location]
            terrain=Q*^*,X*
            adjacent=nw,se
            count=0
        [/filter_adjacent_location]
    ) "(Q*^Bs\,Q*^Bs\,Q*^Bh\)" 1 LAYER="overlay"}
    {VRA_SCATTER_FILTER_FRACTION (
        terrain=Q*^Bs\,Q*^Bh\
        [filter_adjacent_location]
            terrain=Q*^*,X*
            adjacent=nw,se
            count=1-2
        [/filter_adjacent_location]
        [filter_adjacent_location]
            terrain=Q*^*,X*
            adjacent=ne,sw
            count=0
        [/filter_adjacent_location]
    ) "(Q*^Bs/,Q*^Bs/,Q*^Bh/)" 1 LAYER="overlay"}
    {VRA_SCATTER_FILTER_FRACTION (
        terrain=Q*^Bs\,Q*^Bh\
        [filter_adjacent_location]
            terrain=Q*^*,X*
            adjacent=nw,se
            count=1-2
        [/filter_adjacent_location]
        [filter_adjacent_location]
            terrain=Q*^*,X*
            adjacent=n,s
            count=0
        [/filter_adjacent_location]
    ) "(Q*^Bs|,Q*^Bs|,Q*^Bh|)" 1 LAYER="overlay"}
    ## eliminate impossible bridges
    [terrain]
        terrain=Q*
        layer=overlay
        [and]
            terrain=Q*^Bs\,Q*^Bh\
            [filter_adjacent_location]
                terrain=Q*^*,X*
                adjacent=nw,se
                count=1-2
            [/filter_adjacent_location]
        [/and]
    [/terrain]
    [terrain]
        terrain=Q*
        layer=overlay
        [and]
            terrain=Q*^Bs/,Q*^Bh/
            [filter_adjacent_location]
                terrain=Q*^*,X*
                adjacent=ne,sw
                count=1-2
            [/filter_adjacent_location]
        [/and]
    [/terrain]
    [terrain]
        terrain=Q*
        layer=overlay
        [and]
            terrain=Q*^Bs|,Q*^Bh|
            [filter_adjacent_location]
                terrain=Q*^*,X*
                adjacent=n,s
                count=1-2
            [/filter_adjacent_location]
        [/and]
    [/terrain]
#enddef

#define WCT_MAP_4C_POST_BUNUS_DECORATION
    ## dwarvish forges and keeps
    [store_locations]
        terrain=*^Uf
        [filter_adjacent_location]
            terrain=*^Vud
        [/filter_adjacent_location]
        variable=wcii.terrain_to_change
    [/store_locations]
    {FOREACH wcii.terrain_to_change forge_i}
        {RANDOM 0..5}
        [switch]
            variable=random
            [case]
                value=0
                [terrain]
                    x=$wcii.terrain_to_change[$forge_i].x
                    y=$wcii.terrain_to_change[$forge_i].y
                    terrain=Cud
                [/terrain]
            [/case]
            [case]
                value=1
                [terrain]
                    x=$wcii.terrain_to_change[$forge_i].x
                    y=$wcii.terrain_to_change[$forge_i].y
                    terrain=Kud
                [/terrain]
            [/case]
            [case]
                value=2
                [terrain]
                    x=$wcii.terrain_to_change[$forge_i].x
                    y=$wcii.terrain_to_change[$forge_i].y
                    terrain=Kv
                [/terrain]
            [/case]
        [/switch]
    {NEXT forge_i}
    #    [item]
    #        terrain=Kv
    #        image={IMG_DARVISH_ANVILS}
    #    [/item]
    [terrain]
        terrain=Cud
        [and]
            terrain=Kv
        [/and]
    [/terrain]
    {WCT_NOISE_SNOW_TO Rb}
#enddef

#define WCT_MAP_4C_CONECT_RAILS
    ## conect rails where possible
    [store_locations]
        terrain=*^Br|
        [filter_adjacent_location]
            terrain=*^Br*
            adjacent=n,s
            count=0
        [/filter_adjacent_location]
        [or]
            terrain=*^Br\
            [filter_adjacent_location]
                terrain=*^Br*
                adjacent=nw,se
                count=0
            [/filter_adjacent_location]
        [/or]
        [or]
            terrain=*^Br/
            [filter_adjacent_location]
                terrain=*^Br*
                adjacent=ne,sw
                count=0
            [/filter_adjacent_location]
        [/or]
        variable=wcii.terrain_to_change
    [/store_locations]
    [terrain]
        terrain=*^Br|
        layer=overlay
        find_in=wcii.terrain_to_change
        [filter_adjacent_location]
            terrain=*^Br*
            adjacent=n,s
        [/filter_adjacent_location]
    [/terrain]
    [terrain]
        terrain=*^Br\
        layer=overlay
        find_in=wcii.terrain_to_change
        [filter_adjacent_location]
            terrain=*^Br*
            adjacent=nw,se
        [/filter_adjacent_location]
    [/terrain]
    [terrain]
        terrain=*^Br/
        layer=overlay
        find_in=wcii.terrain_to_change
        [filter_adjacent_location]
            terrain=*^Br*
            adjacent=ne,sw
        [/filter_adjacent_location]
    [/terrain]
#enddef
