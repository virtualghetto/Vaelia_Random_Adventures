#textdomain wesnoth-Vaelia_Random_Adventures
# Map generator macros for use with the default map generator.
# These don't depend on any other macros.
# These are only used inside the [generator] tag.
# As [generator] does not support $variable substitution,
# they are all strictly syntactic shortcuts.

# ! in comments is used in generating HTML documentation, ignore it otherwise.
#define HEIGHT ALTITUDE TERRAIN
    # Syntax shortcut
    [height]
        height={ALTITUDE}
        terrain={TERRAIN}
    [/height]
#enddef

#define CONVERT MINHEIGHT MAXHEIGHT MINTEMP MAXTEMP TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MINHEIGHT}
        max_height={MAXHEIGHT}
        min_temperature={MINTEMP}
        max_temperature={MAXTEMP}
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define VRA_CONVERT_VERY_HOT MIN MAX TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MIN}
        max_height={MAX}
        min_temperature=0
        max_temperature=84
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define VRA_CONVERT_HOT MIN MAX TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MIN}
        max_height={MAX}
        min_temperature=85
        max_temperature=184
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define VRA_CONVERT_WARM MIN MAX TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MIN}
        max_height={MAX}
        min_temperature=185
        max_temperature=297
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define VRA_CONVERT_COOL MIN MAX TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MIN}
        max_height={MAX}
        min_temperature=298
        max_temperature=464
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define VRA_CONVERT_COLD MIN MAX TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MIN}
        max_height={MAX}
        min_temperature=465
        max_temperature=599
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define VRA_CONVERT_VERY_COLD MIN MAX TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MIN}
        max_height={MAX}
        min_temperature=600
        max_temperature=1000
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define VRA_CONVERT_MODERATE MIN MAX TERRAINLIST NEW_TERRAIN
    {VRA_CONVERT_WARM {MIN} {MAX} {TERRAINLIST} {NEW_TERRAIN}}
    {VRA_CONVERT_COOL {MIN} {MAX} {TERRAINLIST} {NEW_TERRAIN}}
#enddef

#define CONVERT_HEIGHT MINHEIGHT MAXHEIGHT TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height range, across all temps.
    # Since min & max temperature are left out, they default to cover all temps
    [convert]
        min_height={MINHEIGHT}
        max_height={MAXHEIGHT}
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define CONVERT_TEMP MINTEMP MAXTEMP TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified temp range, across all heights.
    # Since min & max height are left out, they default to cover all heights.
    [convert]
        min_temperature={MINTEMP}
        max_temperature={MAXTEMP}
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define CONVERT_ALL TERRAINLIST NEW_TERRAIN
    #  Convert terrains to a terrain across all heights and temps.
    # Since min & max height & temp are left out, they default to cover all terrain on the map.
    [convert]
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define ROAD_COST TERRAIN COST NEW_TERRAIN
    # Syntax shortcut
    [road_cost]
        terrain={TERRAIN}
        cost={COST}
        convert_to={NEW_TERRAIN}
    [/road_cost]
#enddef

#define ROAD_COST_BRIDGE TERRAIN COST BRIDGE ALT
    # when supplying BRIDGE send it a list like: (Ww^Bw|, Ww^Bw/, Ww^Bw\)
    # if using BRIDGE does not make a pretty connection, the map generator will use ALT
    # typically this is a castle, though it could be anything.
    [road_cost]
        terrain={TERRAIN}
        cost={COST}
        convert_to_bridge={BRIDGE}
        convert_to={ALT}
    [/road_cost]
#enddef

#define ROAD_COST_MIN TERRAIN
    # When multiple roads are made,
    # This encourages the use of the terrain already used as a road to be used again, without being converted.
    # Without this it's more likely you might have silly stuff like two bridges adjacent to each other crossing a river.
    [road_cost]
        terrain={TERRAIN}
        cost=2
        convert_to={TERRAIN}
    [/road_cost]
#enddef

#define VILLAGES TERRAIN VILLAGETYPE RATING LIKED_TERRAINLIST
    # Syntax shortcut
    [village]
        terrain={TERRAIN}
        convert_to={VILLAGETYPE}
        rating={RATING}
        adjacent_liked={LIKED_TERRAINLIST}
    [/village]
#enddef

#define CASTLE MINDISTANCE TERRAINLIST
    # Syntax shortcut
    [castle]
        min_distance={MINDISTANCE}
        valid_terrain={TERRAINLIST}
    [/castle]
#enddef

#define VRA_URM_ILLUMINATED_CAVE
    # Same as {INDOORS} but with a illuminated cave pic
    #textdomain wesnoth-help
    [time]
        id=vra_urm_illuminated_cave
        name=_"Illuminated Cave"
        image=misc/time-schedules/schedule-underground-illum.png
        lighter=indoors_illum
    [/time]
#enddef

#define SCATTER_TERRAIN TERRAINLIST NEW_TERRAIN PERCENTAGE
    # A copy of SCATTER_EMBELLISHMENT with a small change
    # Replaces the first terrain with the second terrain the given percentage of the time
    #
    # For example, this will replace 5% of all grasslands with a volcano:
    #! {SCATTER_TERRAIN G* Mv 5}
    [store_locations]
        terrain={TERRAINLIST}
        variable=terrain_variation_locations
    [/store_locations]

    {VARIABLE terrain_variations_to_place {PERCENTAGE}}

    # TODO: change back to 100.0 once it no longer causes a crash
    {VARIABLE_OP terrain_variations_to_place divide 100.0}

    {VARIABLE_OP terrain_variations_to_place multiply $terrain_variation_locations.length}
    {VARIABLE_OP terrain_variations_to_place round ceil}

    [while]
        [variable]
            name=terrain_variations_to_place
            greater_than=0
        [/variable]

        [do]
            {VARIABLE_OP terrain_variation_i rand "0..$($terrain_variation_locations.length - 1)"}

            [terrain]
                x,y=$terrain_variation_locations[$terrain_variation_i].x,$terrain_variation_locations[$terrain_variation_i].y
                terrain={NEW_TERRAIN}
                layer=both
            [/terrain]

            {VARIABLE_OP terrain_variations_to_place sub 1}

            {CLEAR_VARIABLE terrain_variation_locations[$terrain_variation_i]}
        [/do]
    [/while]

    {CLEAR_VARIABLE terrain_variation_locations,terrain_variations_to_place,terrain_variation_i}
#enddef

#define DEEPEN_WATER
    # If a shallow water is surrounded on all sides by water, make it deep water
    # store all terrain locations
    # analyzes all 6 hexes around a location
    # if it is all water, turn location into deep water
    [terrain]
        terrain=Wo
        [and]
            terrain=Ww,Wo
        [/and]
        [filter_adjacent_location]
            terrain=Ww,Wo
            count=6
        [/filter_adjacent_location]
    [/terrain]
#enddef

#define MAP_CLEAR_LABLES
    # The Map Generator applies labels to the map.
    # Depending on your map, you might not want them.
    # This is used for removing them.
    # Can't be used in [generator], must be used in an event.
    # When used with the default generator, can be put in
    # a prestart event.
    # added back in to work around https://gna.org/bugs/?24709
    [event]
        name=prestart
        [lua]
            code=<<
local w, h, b = wesnoth.get_map_size()
for y1 = 1 - b, h + b do
for x1 = 1 - b, w + b do
wesnoth.fire("label",{x=x1,y=y1,text=""})
end
end
>>
        [/lua]
    [/event]
#enddef

#define MIN_COST_ROAD TERRAIN
    [road_cost]
        terrain={TERRAIN}
        cost=2
        convert_to={TERRAIN}
    [/road_cost]
#enddef

#define VRA_GET_SCATTER_LOCS TERRAINLIST MIN NUM
    {CLEAR_VARIABLE scatter_arr.locs}
    {CLEAR_VARIABLE scatter_arr}
    {CLEAR_VARIABLE scatter_arr_index}
    [random_placement]
        num_items={NUM}
        variable=random_placement_location
        allow_less=yes
        min_distance={MIN}
        [filter_location]
            terrain={TERRAINLIST}
            include_borders=no
        [/filter_location]
        [command]
            # x,y=$random_placement_location.x,$random_placement_location.y
            {VARIABLE scatter_arr_index $scatter_arr.locs.length}
            [set_variable]
                name=scatter_arr.locs[$scatter_arr_index].count
                value=$scatter_arr_index
            [/set_variable]
            [set_variable]
                name=scatter_arr.locs[$scatter_arr_index].x
                value=$random_placement_location.x
            [/set_variable]
            [set_variable]
                name=scatter_arr.locs[$scatter_arr_index].y
                value=$random_placement_location.y
            [/set_variable]
        [/command]
    [/random_placement]
    {CLEAR_VARIABLE random_placement_location}
    {CLEAR_VARIABLE scatter_arr_index}
    {SHUFFLE_ARRAY scatter_arr}
#enddef

#define VRA_SCATTER_CAVE TERRAINLIST MIN EMBELLISHMENT_NAME PERCENTAGE
    # Adds the given embellishment to the given percentage of the given terrain
    # on the map.
    #
    # For example, this will add flowers to 5% of all grassland:
    #! {SCATTER_EMBELLISHMENTS G* ^Efm 5}
    [random_placement]
        num_items="size * ({PERCENTAGE} / 100)"
        variable=random_placement_location
        allow_less=yes
        min_distance={MIN}
        [filter_location]
            terrain={TERRAINLIST}
        [/filter_location]
        [command]
            [terrain]
                x,y=$random_placement_location.x,$random_placement_location.y
                terrain={EMBELLISHMENT_NAME}
            [/terrain]
        [/command]
    [/random_placement]
    {CLEAR_VARIABLE random_placement_location}
#enddef

#define VRA_SCATTER_ADJ_CAVE ADJLIST COUNT TERRAINLIST MIN EMBELLISHMENT_NAME PERCENTAGE
    [random_placement]
        num_items="size * ({PERCENTAGE} / 100)"
        variable=random_placement_location
        allow_less=yes
        min_distance={MIN}
        [filter_location]
            terrain={TERRAINLIST}
            [filter_adjacent_location]
                terrain={ADJLIST}
                count={COUNT}
            [/filter_adjacent_location]
            #[not]
            #    [filter_adjacent_location]
            #        terrain={EMBELLISHMENT_NAME}
            #        count=1-6
            #    [/filter_adjacent_location]
            #[/not]
        [/filter_location]
        [command]
            [terrain]
                x,y=$random_placement_location.x,$random_placement_location.y
                terrain={EMBELLISHMENT_NAME}
                #            [filter_adjacent_location]
                #                    terrain={ADJLIST}
                #                    count={COUNT}
                #            [/filter_adjacent_location]
                #        [not]
                #            [filter_adjacent_location]
                #                    terrain={EMBELLISHMENT_NAME}
                #                    count=1-6
                #            [/filter_adjacent_location]
                #        [/not]
            [/terrain]
        [/command]
    [/random_placement]
    {CLEAR_VARIABLE random_placement_location}
#enddef

#define PASSAGE_STRAIGHT DESTINATION_NAME WIDTH_NUMBER WINDINESS_NUMBER JAGGED_NUMBER
    [passage]
        destination={DESTINATION_NAME}
        width=1
        windiness=0
        jagged=0
    [/passage]
    [passage]
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
    [passage]
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
#enddef

#define PASSAGE_NORMAL DESTINATION_NAME WIDTH_NUMBER WINDINESS_NUMBER JAGGED_NUMBER
    [passage]
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
#enddef

#define PASSAGE_CHANCE CHANCE_NUMBER DESTINATION_NAME WIDTH_NUMBER WINDINESS_NUMBER JAGGED_NUMBER
    [passage]
        chance={CHANCE_NUMBER}
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
#enddef

#define PASSAGE_NORMAL2 DESTINATION_NAME WIDTH_NUMBER WINDINESS_NUMBER JAGGED_NUMBER
    [passage]
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
    [passage]
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
#enddef

#define PASSAGE_CHANCE2 CHANCE_NUMBER DESTINATION_NAME WIDTH_NUMBER WINDINESS_NUMBER JAGGED_NUMBER
    [passage]
        chance={CHANCE_NUMBER}
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
    [passage]
        chance={CHANCE_NUMBER}
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
#enddef

#define PASSAGE_NORMAL3 DESTINATION_NAME WIDTH_NUMBER WINDINESS_NUMBER JAGGED_NUMBER
    [passage]
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
    [passage]
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
    [passage]
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
#enddef

#define PASSAGE_CHANCE3 CHANCE_NUMBER DESTINATION_NAME WIDTH_NUMBER WINDINESS_NUMBER JAGGED_NUMBER
    [passage]
        chance={CHANCE_NUMBER}
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
    [passage]
        chance={CHANCE_NUMBER}
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
    [passage]
        chance={CHANCE_NUMBER}
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
#enddef

#define PASSAGE_NORMAL4 DESTINATION_NAME WIDTH_NUMBER WINDINESS_NUMBER JAGGED_NUMBER
    [passage]
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
    [passage]
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
    [passage]
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
    [passage]
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
#enddef

#define PASSAGE_CHANCE4 CHANCE_NUMBER DESTINATION_NAME WIDTH_NUMBER WINDINESS_NUMBER JAGGED_NUMBER
    [passage]
        chance={CHANCE_NUMBER}
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
    [passage]
        chance={CHANCE_NUMBER}
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
    [passage]
        chance={CHANCE_NUMBER}
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
    [passage]
        chance={CHANCE_NUMBER}
        destination={DESTINATION_NAME}
        width={WIDTH_NUMBER}
        windiness={WINDINESS_NUMBER}
        jagged={JAGGED_NUMBER}
    [/passage]
#enddef

#define VRA_EXIT_CAVE_BORDER TERRAIN
    [store_map_dimensions]
        variable=store_map_dim
    [/store_map_dimensions]

    [store_locations]
        #terrain=Uu
        terrain=!,Xu,Qxu
        [not]
            x=1-$store_map_dim.width
            y=1-$store_map_dim.height
        [/not]
        variable=offmap_locs
    [/store_locations]
    [foreach]
        array=offmap_locs
        [do]
            [terrain]
                terrain={TERRAIN}
                [and]
                    x,y=$this_item.x,$this_item.y
                    radius=2
                    [filter_radius]
                        terrain=Qxu,Xu,Uu
                    [/filter_radius]
                [/and]
            [/terrain]
        [/do]
    [/foreach]
    {CLEAR_VARIABLE store_map_dim}
    {CLEAR_VARIABLE offmap_locs}
#enddef

#define VRA_CLEAR_CAVE_BORDER TERRAIN
    [store_map_dimensions]
        variable=store_map_dim
    [/store_map_dimensions]

    [store_locations]
        #terrain=Uu
        terrain=!,Xu,Qxu
        [not]
            x=1-$store_map_dim.width
            y=1-$store_map_dim.height
        [/not]
        variable=offmap_locs
    [/store_locations]
    [foreach]
        array=offmap_locs
        [do]
            [terrain]
                x,y=$this_item.x,$this_item.y
                terrain={TERRAIN}
            [/terrain]
        [/do]
    [/foreach]
    {CLEAR_VARIABLE store_map_dim}
    {CLEAR_VARIABLE offmap_locs}
#enddef

#define VRA_CASTLE_CHANGE ARR CH
    [foreach]
        #array={ARR}
        array=change_arr
        [do]
            #        [set_variable]
            #            name=debbie.terra[$debbie.terra.length].terrain
            #            value=$this_item.terrain
            #        [/set_variable]
            [switch]
                variable=this_item.terrain
                [case]
                    value=Hh,Mm
                    [terrain]
                        x,y=$this_item.x,$this_item.y
                        terrain=Ce
                    [/terrain]
                [/case]
                [case]
                    value=Hhd,Ds,Md
                    [terrain]
                        x,y=$this_item.x,$this_item.y
                        terrain=Cer
                    [/terrain]
                [/case]
                [case]
                    value=Hd
                    [terrain]
                        x,y=$this_item.x,$this_item.y
                        terrain=Cdr
                    [/terrain]
                [/case]
                [case]
                    value=Dd
                    [terrain]
                        x,y=$this_item.x,$this_item.y
                        terrain=Cd
                    [/terrain]
                [/case]
                [case]
                    value=Ss,Sm
                    [terrain]
                        x,y=$this_item.x,$this_item.y
                        terrain=Chs
                    [/terrain]
                [/case]
                [case]
                    value=Aa,Ai,Aa^Fpa
                    [terrain]
                        x,y=$this_item.x,$this_item.y
                        terrain=Cha
                    [/terrain]
                [/case]
                [case]
                    value=Ha,Ms
                    [terrain]
                        x,y=$this_item.x,$this_item.y
                        terrain=Cea
                    [/terrain]
                [/case]
                [case]
                    value=Ww
                    [terrain]
                        x,y=$this_item.x,$this_item.y
                        terrain=Chw
                    [/terrain]
                [/case]
                [case]
                    value=Wo
                    [terrain]
                        x,y=$this_item.x,$this_item.y
                        terrain=Cme
                    [/terrain]
                [/case]
                [case]
                    value=Uh
                    [terrain]
                        x,y=$this_item.x,$this_item.y
                        terrain=Cte
                    [/terrain]
                [/case]
                [case]
                    value=Uu,Uue,Ur,Urb,Uu^Uf,Uue^Uf
                    [terrain]
                        x,y=$this_item.x,$this_item.y
                        terrain=Cud
                    [/terrain]
                [/case]
                [else]
                    [terrain]
                        x,y=$this_item.x,$this_item.y
                        #terrain=$castle_arr[0].terrain
                        #terrain={CH}
                        terrain=Chr
                    [/terrain]
                [/else]
            [/switch]
        [/do]
    [/foreach]
#enddef

#define VRA_CASTLE_ALLY LOC
    [store_starting_location]
        side={LOC}
        variable=side_start
    [/store_starting_location]

    [store_locations]
        x,y=$side_start.x,$side_start.y
        radius=1
        variable=inner_arr
    [/store_locations]

    [store_locations]
        x,y=$side_start.x,$side_start.y
        radius=2
        variable=outer_arr
    [/store_locations]

    {CLEAR_VARIABLE side_start}

    [store_locations]
        terrain=K*
        find_in=inner_arr
        variable=castle_keep
    [/store_locations]

    [store_locations]
        terrain=C*
        find_in=inner_arr
        variable=castle_inner
    [/store_locations]

    {VARIABLE change_index 0}

    [foreach]
        array=outer_arr
        [do]
            [store_locations]
                x,y=$this_item.x,$this_item.y
                find_in=inner_arr
                variable=from_inner
            [/store_locations]

            [if]
                {VARIABLE_CONDITIONAL from_inner.length numerical_equals 0}
                [then]
                    [set_variable]
                        name=tmp_change_arr[$change_index].terrain
                        value=$this_item.terrain
                    [/set_variable]
                    [set_variable]
                        name=tmp_change_arr[$change_index].x
                        value=$this_item.x
                    [/set_variable]
                    [set_variable]
                        name=tmp_change_arr[$change_index].y
                        value=$this_item.y
                    [/set_variable]
                    {VARIABLE_OP change_index add 1}
                [/then]
            [/if]
            {CLEAR_VARIABLE from_inner}
        [/do]
    [/foreach]
    {CLEAR_VARIABLE change_index}
    {CLEAR_VARIABLE inner_arr}
    {CLEAR_VARIABLE outer_arr}

    [store_locations]
        terrain=C*
        find_in=tmp_change_arr
        variable=castle_outer
    [/store_locations]

    {CLEAR_VARIABLE tmp_change_arr}

    [foreach]
        array=castle_outer
        [do]
            [terrain]
                x,y=$this_item.x,$this_item.y
                terrain=Cer
            [/terrain]
        [/do]
    [/foreach]

    [foreach]
        array=castle_inner
        [do]
            [terrain]
                x,y=$this_item.x,$this_item.y
                terrain=Cud
            [/terrain]
        [/do]
    [/foreach]

    [foreach]
        array=castle_keep
        [do]
            [terrain]
                x,y=$this_item.x,$this_item.y
                terrain=Ker
            [/terrain]
        [/do]
    [/foreach]

    {CLEAR_VARIABLE castle_keep}
    {CLEAR_VARIABLE castle_inner}
    {CLEAR_VARIABLE castle_outer}
#enddef

#define VRA_CASTLE_SEVEN LOC RADIUS
    [store_starting_location]
        side={LOC}
        variable=side_start
    [/store_starting_location]

    [store_locations]
        x,y=$side_start.x,$side_start.y
        radius=1
        variable=inner_arr
    [/store_locations]

    [store_locations]
        terrain=C*
        find_in=inner_arr
        variable=castle_arr
    [/store_locations]

    {CLEAR_VARIABLE inner_arr}

    [store_locations]
        x,y=$side_start.x,$side_start.y
        radius={RADIUS}
        variable=outer_arr
    [/store_locations]

    {CLEAR_VARIABLE side_start}

    [store_locations]
        terrain=!,K*,C*
        find_in=outer_arr
        variable=change_arr
    [/store_locations]

    {CLEAR_VARIABLE outer_arr}

    {VRA_CASTLE_CHANGE change_arr $castle_arr[0].terrain}

    {CLEAR_VARIABLE change_arr}
    {CLEAR_VARIABLE castle_arr}
#enddef

#define VRA_CASTLE_ARC LOC
    [store_starting_location]
        side={LOC}
        variable=side_start
    [/store_starting_location]

    [store_locations]
        x,y=$side_start.x,$side_start.y
        radius=1
        variable=inner_arr
    [/store_locations]

    [store_locations]
        x,y=$side_start.x,$side_start.y
        radius=2
        variable=outer_arr
    [/store_locations]

    {CLEAR_VARIABLE side_start}

    [store_locations]
        terrain=C*
        find_in=inner_arr
        variable=castle_arr
    [/store_locations]

    {VARIABLE change_index 0}

    [foreach]
        array=outer_arr
        [do]
            [store_locations]
                x,y=$this_item.x,$this_item.y
                find_in=inner_arr
                variable=from_inner
            [/store_locations]

            [if]
                {VARIABLE_CONDITIONAL from_inner.length numerical_equals 0}
                [then]
                    [set_variable]
                        name=tmp_change_arr[$change_index].terrain
                        value=$this_item.terrain
                    [/set_variable]
                    [set_variable]
                        name=tmp_change_arr[$change_index].x
                        value=$this_item.x
                    [/set_variable]
                    [set_variable]
                        name=tmp_change_arr[$change_index].y
                        value=$this_item.y
                    [/set_variable]
                    {VARIABLE_OP change_index add 1}
                [/then]
            [/if]
            {CLEAR_VARIABLE from_inner}
        [/do]
    [/foreach]
    {CLEAR_VARIABLE change_index}
    {CLEAR_VARIABLE inner_arr}
    {CLEAR_VARIABLE outer_arr}

    [store_locations]
        terrain=!,K*,C*
        find_in=tmp_change_arr
        variable=change_arr
    [/store_locations]

    {CLEAR_VARIABLE tmp_change_arr}

    {VRA_CASTLE_CHANGE change_arr $castle_arr[0].terrain}

    {CLEAR_VARIABLE change_arr}
    {CLEAR_VARIABLE castle_arr}
#enddef

#define VRA_CASTLE_ARC_CAVE LOC
    [store_starting_location]
        side={LOC}
        variable=side_start
    [/store_starting_location]

    [store_locations]
        x,y=$side_start.x,$side_start.y
        radius=1
        variable=inner_arr
    [/store_locations]

    [store_locations]
        x,y=$side_start.x,$side_start.y
        radius=2
        variable=outer_arr
    [/store_locations]

    {VARIABLE change_index 0}

    [foreach]
        array=outer_arr
        [do]
            [store_locations]
                x,y=$this_item.x,$this_item.y
                find_in=inner_arr
                variable=from_inner
            [/store_locations]

            [if]
                {VARIABLE_CONDITIONAL from_inner.length numerical_equals 0}
                [then]
                    [set_variable]
                        name=tmp_change_arr[$change_index].terrain
                        value=$this_item.terrain
                    [/set_variable]
                    [set_variable]
                        name=tmp_change_arr[$change_index].x
                        value=$this_item.x
                    [/set_variable]
                    [set_variable]
                        name=tmp_change_arr[$change_index].y
                        value=$this_item.y
                    [/set_variable]
                    {VARIABLE_OP change_index add 1}
                [/then]
            [/if]
            {CLEAR_VARIABLE from_inner}
        [/do]
    [/foreach]
    {CLEAR_VARIABLE change_index}
    {CLEAR_VARIABLE outer_arr}

    [foreach]
        array=inner_arr
        [do]
            [terrain]
                x,y=$this_item.x,$this_item.y
                terrain=Urb
            [/terrain]
        [/do]
    [/foreach]
    {CLEAR_VARIABLE inner_arr}

    [terrain]
        x,y=$side_start.x,$side_start.y
        terrain=Kud
    [/terrain]

    {VARIABLE_OP do_cave rand "0..1"}
    [if]
        {VARIABLE_CONDITIONAL do_cave numerical_equals 1}
        [then]
            {VARIABLE_OP side_start.y sub 1}
            [terrain]
                x,y=$side_start.x,$side_start.y
                terrain=Cud
            [/terrain]
        [/then]
        [else]
            {VARIABLE_OP side_start.y add 1}
            [terrain]
                x,y=$side_start.x,$side_start.y
                terrain=Cud
            [/terrain]
        [/else]
    [/if]
    {CLEAR_VARIABLE do_cave}
    {CLEAR_VARIABLE side_start}

    [store_locations]
        terrain=!,K*,C*
        find_in=tmp_change_arr
        variable=change_arr
    [/store_locations]

    {CLEAR_VARIABLE tmp_change_arr}

    [foreach]
        array=change_arr
        [do]
            #        [set_variable]
            #            name=debbie.terra[$debbie.terra.length].terrain
            #            value=$this_item.terrain
            #        [/set_variable]
            [terrain]
                x,y=$this_item.x,$this_item.y
                terrain=Cud
            [/terrain]
        [/do]
    [/foreach]

    {CLEAR_VARIABLE change_arr}
#enddef

#define VRA_CASTLE_SIX LOC
    [store_starting_location]
        side={LOC}
        variable=side_start
    [/store_starting_location]

    [store_locations]
        x,y=$side_start.x,$side_start.y
        radius=1
        [filter_radius]
            terrain=C*
        [/filter_radius]
        variable=castle_arr_tmp
    [/store_locations]

    [store_locations]
        terrain=C*
        find_in=castle_arr_tmp
        variable=castle_arr
    [/store_locations]

    [foreach]
        array=side_start
        [do]
            [terrain]
                x,y=$this_item.x,$this_item.y
                terrain=$castle_arr[0].terrain
                radius=1
                #[filter_radius]
                #    terrain=!,K*
                #[/filter_radius]
            [/terrain]
            [terrain]
                x,y=$this_item.x,$this_item.y
                terrain=$side_start[0].terrain
                #[filter_radius]
                #    terrain=!,K*
                #[/filter_radius]
            [/terrain]
        [/do]
    [/foreach]
    {CLEAR_VARIABLE castle_arr_tmp}
    {CLEAR_VARIABLE side_start}
    {CLEAR_VARIABLE castle_arr}
#enddef

#define VRA_TERRAIN FROM TO
    [terrain]
        terrain={TO}
        [and]
            terrain={FROM}
        [/and]
    [/terrain]
#enddef

#define VRA_VAR VAR EASY_VALUE NORMAL_VALUE HARD_VALUE
    [set_variable]
        name={VAR}
#ifdef EASY
        value={EASY_VALUE}
#endif
#ifdef NORMAL
        value={NORMAL_VALUE}
#endif
#ifdef HARD
        value={HARD_VALUE}
#endif
    [/set_variable]
#enddef

#define VRA_VILLAGE_COASTLINE
    [terrain]
        [and]
            terrain=Wo
            [filter_adjacent_location]
                terrain=Gg^V*,Gd^V*,Gs^V*,Dd^V*,Hh^V*,Hhd^V*,Mm^V*,Ms^V*,Md^V*,Aa^V*,Ai^V*,Ha^V*,Ss^V*,Ww^V*
                count=1-6
            [/filter_adjacent_location]
        [/and]
        terrain=Ww
    [/terrain]
#enddef

#define VRA_WIDEN_ROAD ROAD TERRAIN
    [terrain]
        [and]
            [not]
                terrain={ROAD},K*,C*,*^V*
            [/not]
            [filter_adjacent_location]
                terrain={ROAD}
                count=1-6
            [/filter_adjacent_location]
        [/and]
        terrain={TERRAIN}
    [/terrain]
#enddef

#define VRA_ADJ_REPLACE ADJ OLD NEW
    [terrain]
        [and]
            terrain={OLD}
            [filter_adjacent_location]
                terrain={ADJ}
                count=1-6
            [/filter_adjacent_location]
        [/and]
        terrain={NEW}
    [/terrain]
#enddef
