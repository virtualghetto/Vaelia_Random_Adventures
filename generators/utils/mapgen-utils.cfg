#textdomain wesnoth-Vaelia_Random_Adventures
# Map generator macros for use with the default map generator.
# These don't depend on any other macros.
# These are only used inside the [generator] tag.
# As [generator] does not support $variable substitution,
# they are all strictly syntactic shortcuts.

# ! in comments is used in generating HTML documentation, ignore it otherwise.
#define HEIGHT ALTITUDE TERRAIN
    # Syntax shortcut
    [height]
        height={ALTITUDE}
        terrain={TERRAIN}
    [/height]
#enddef

#define CONVERT MINHEIGHT MAXHEIGHT MINTEMP MAXTEMP TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MINHEIGHT}
        max_height={MAXHEIGHT}
        min_temperature={MINTEMP}
        max_temperature={MAXTEMP}
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define CONVERT_HEIGHT MINHEIGHT MAXHEIGHT TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height range, across all temps.
    # Since min & max temperature are left out, they default to cover all temps
    [convert]
        min_height={MINHEIGHT}
        max_height={MAXHEIGHT}
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define CONVERT_TEMP MINTEMP MAXTEMP TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified temp range, across all heights.
    # Since min & max height are left out, they default to cover all heights.
    [convert]
        min_temperature={MINTEMP}
        max_temperature={MAXTEMP}
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define CONVERT_ALL TERRAINLIST NEW_TERRAIN
    #  Convert terrains to a terrain across all heights and temps.
    # Since min & max height & temp are left out, they default to cover all terrain on the map.
    [convert]
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define ROAD_COST TERRAIN COST NEW_TERRAIN
    # Syntax shortcut
    [road_cost]
        terrain={TERRAIN}
        cost={COST}
        convert_to={NEW_TERRAIN}
    [/road_cost]
#enddef

#define ROAD_COST_BRIDGE TERRAIN COST BRIDGE ALT
    # when supplying BRIDGE send it a list like: (Ww^Bw|, Ww^Bw/, Ww^Bw\)
    # if using BRIDGE does not make a pretty connection, the map generator will use ALT
    # typically this is a castle, though it could be anything.
    [road_cost]
        terrain={TERRAIN}
        cost={COST}
        convert_to_bridge={BRIDGE}
        convert_to={ALT}
    [/road_cost]
#enddef

#define ROAD_COST_MIN TERRAIN
    # When multiple roads are made,
    # This encourages the use of the terrain already used as a road to be used again, without being converted.
    # Without this it's more likely you might have silly stuff like two bridges adjacent to each other crossing a river.
    [road_cost]
        terrain={TERRAIN}
        cost=2
        convert_to={TERRAIN}
    [/road_cost]
#enddef

#define VILLAGES TERRAIN VILLAGETYPE RATING LIKED_TERRAINLIST
    # Syntax shortcut
    [village]
        terrain={TERRAIN}
        convert_to={VILLAGETYPE}
        rating={RATING}
        adjacent_liked={LIKED_TERRAINLIST}
    [/village]
#enddef

#define CASTLE MINDISTANCE TERRAINLIST
    # Syntax shortcut
    [castle]
        min_distance={MINDISTANCE}
        valid_terrain={TERRAINLIST}
    [/castle]
#enddef

#define VRA_URM_ILLUMINATED_CAVE
    # Same as {INDOORS} but with a illuminated cave pic
    #textdomain wesnoth-help
    [time]
        id=vra_urm_illuminated_cave
        name=_"Illuminated Cave"
        image=misc/time-schedules/schedule-underground-illum.png
        lighter=indoors_illum
    [/time]
#enddef

#define SCATTER_TERRAIN TERRAINLIST NEW_TERRAIN PERCENTAGE
    # A copy of SCATTER_EMBELLISHMENT with a small change
    # Replaces the first terrain with the second terrain the given percentage of the time
    #
    # For example, this will replace 5% of all grasslands with a volcano:
    #! {SCATTER_TERRAIN G* Mv 5}
    [store_locations]
        terrain={TERRAINLIST}
        variable=terrain_variation_locations
    [/store_locations]

    {VARIABLE terrain_variations_to_place {PERCENTAGE}}

    # TODO: change back to 100.0 once it no longer causes a crash
    {VARIABLE_OP terrain_variations_to_place divide 100.0}

    {VARIABLE_OP terrain_variations_to_place multiply $terrain_variation_locations.length}
    {VARIABLE_OP terrain_variations_to_place round ceil}

    [while]
        [variable]
            name=terrain_variations_to_place
            greater_than=0
        [/variable]

        [do]
            {VARIABLE_OP terrain_variation_i rand "0..$($terrain_variation_locations.length - 1)"}

            [terrain]
                x,y=$terrain_variation_locations[$terrain_variation_i].x,$terrain_variation_locations[$terrain_variation_i].y
                terrain={NEW_TERRAIN}
                layer=both
            [/terrain]

            {VARIABLE_OP terrain_variations_to_place sub 1}

            {CLEAR_VARIABLE terrain_variation_locations[$terrain_variation_i]}
        [/do]
    [/while]

    {CLEAR_VARIABLE terrain_variation_locations,terrain_variations_to_place,terrain_variation_i}
#enddef

#define DEEPEN_WATER
    # If a shallow water is surrounded on all sides by water, make it deep water
    # store all terrain locations
    # analyzes all 6 hexes around a location
    # if it is all water, turn location into deep water
    [terrain]
        terrain=Wo
        [and]
            terrain=Ww,Wo
        [/and]
        [filter_adjacent_location]
            terrain=Ww,Wo
            count=6
        [/filter_adjacent_location]
    [/terrain]
#enddef

#define MAP_CLEAR_LABLES
    # The Map Generator applies labels to the map.
    # Depending on your map, you might not want them.
    # This is used for removing them.
    # Can't be used in [generator], must be used in an event.
    # When used with the default generator, can be put in
    # a prestart event.
    # added back in to work around https://gna.org/bugs/?24709
    [event]
        name=prestart
        [lua]
            code=<<
                local w, h, b = wesnoth.get_map_size()
                for y1 = 1 - b, h + b do
                    for x1 = 1 - b, w + b do
                      wesnoth.fire("label",{x=x1,y=y1,text=""})
                    end
                end
            >>
        [/lua]
    [/event]
#enddef

#define MIN_COST_ROAD TERRAIN
    [road_cost]
        terrain={TERRAIN}
        cost=2
        convert_to={TERRAIN}
    [/road_cost]
#enddef

#define VRA_SCATTER_CAVE TERRAINLIST MIN EMBELLISHMENT_NAME PERCENTAGE
    # Adds the given embellishment to the given percentage of the given terrain
    # on the map.
    #
    # For example, this will add flowers to 5% of all grassland:
    #! {SCATTER_EMBELLISHMENTS G* ^Efm 5}
    [random_placement]
        num_items="size * ({PERCENTAGE} / 100)"
        variable=random_placement_location
        allow_less=yes
        min_distance={MIN}
        [filter_location]
            terrain={TERRAINLIST}
        [/filter_location]
        [command]
            [terrain]
                x,y=$random_placement_location.x,$random_placement_location.y
                terrain={EMBELLISHMENT_NAME}
            [/terrain]
        [/command]
    [/random_placement]
    {CLEAR_VARIABLE random_placement_location}
#enddef

#define VRA_SCATTER_ADJ_CAVE ADJLIST COUNT TERRAINLIST MIN EMBELLISHMENT_NAME PERCENTAGE
    [random_placement]
        num_items="size * ({PERCENTAGE} / 100)"
        variable=random_placement_location
        allow_less=yes
        min_distance={MIN}
        [filter_location]
            terrain={TERRAINLIST}
                [filter_adjacent_location]
                        terrain={ADJLIST}
                        count={COUNT}
                [/filter_adjacent_location]
#		[not]
#        	[filter_adjacent_location]
#            		terrain={EMBELLISHMENT_NAME}
#            		count=1-6
#        	[/filter_adjacent_location]
#		[/not]
        [/filter_location]
        [command]
            [terrain]
                x,y=$random_placement_location.x,$random_placement_location.y
                terrain={EMBELLISHMENT_NAME}
#        	[filter_adjacent_location]
#            		terrain={ADJLIST}
#            		count={COUNT}
#        	[/filter_adjacent_location]
#		[not]
#        	[filter_adjacent_location]
#            		terrain={EMBELLISHMENT_NAME}
#            		count=1-6
#        	[/filter_adjacent_location]
#		[/not]
            [/terrain]
        [/command]
    [/random_placement]
    {CLEAR_VARIABLE random_placement_location}
#enddef

#define PASSAGE_NORMAL DESTINATION_NAME WIDTH_NUMBER WINDINESS_NUMBER JAGGED_NUMBER
[passage]
	destination={DESTINATION_NAME}
	width={WIDTH_NUMBER}
	windiness={WINDINESS_NUMBER}
	jagged={JAGGED_NUMBER}
[/passage]
#enddef

#define PASSAGE_CHANCE CHANCE_NUMBER DESTINATION_NAME WIDTH_NUMBER WINDINESS_NUMBER JAGGED_NUMBER
[passage]
	chance={CHANCE_NUMBER}
	destination={DESTINATION_NAME}
	width={WIDTH_NUMBER}
	windiness={WINDINESS_NUMBER}
	jagged={JAGGED_NUMBER}
[/passage]
#enddef


#define VRA_DEBUG_LOCS
[event]
	name=start

	[store_locations]
		terrain=Uu^Vu
		variable=Vu_locs
	[/store_locations]
	[store_locations]
		terrain=Uu^Vud
		variable=Vud_locs
	[/store_locations]
	[store_locations]
		terrain=Uu^Uf
		variable=Uf_locs
	[/store_locations]
	[store_locations]
		terrain=Uu
		variable=Uu_locs
	[/store_locations]
	[store_locations]
		terrain=Rb
		variable=Rb_locs
	[/store_locations]
	[store_locations]
		terrain=Uh
		variable=Uh_locs
	[/store_locations]
	[store_locations]
		terrain=Sm
		variable=Sm_locs
	[/store_locations]
	[store_locations]
		terrain=Wwg
		variable=Wwg_locs
	[/store_locations]
	[store_locations]
		terrain=Ur
		variable=Ur_locs
	[/store_locations]
	[store_locations]
		terrain=Wwf
		variable=Wwf_locs
	[/store_locations]
	[store_locations]
		terrain=Wwrg
		variable=Wwrg_locs
	[/store_locations]
	[store_locations]
		terrain=!,Xu,Qxu
		[not]
			x=1-50
			y=1-50
		[/not]
		variable=offmap_locs
	[/store_locations]

	{DEBUG_MSG "Uu^Vu $Vu_locs.length| Uu^Vud $Vud_locs.length| Uu^Uf $Uf_locs.length| Uu $Uu_locs.length| Rb $Rb_locs.length| Uh $Uh_locs.length| Sm $Sm_locs.length| Wwg $Wwg_locs.length| Ur $Ur_locs.length| Wwf $Wwf_locs.length| Wwrg $Wwrg_locs.length| off $offmap_locs.length|"}

		{CLEAR_VARIABLE Rb_locs}
		{CLEAR_VARIABLE Sm_locs}
		{CLEAR_VARIABLE Uf_locs}
		{CLEAR_VARIABLE Uh_locs}
		{CLEAR_VARIABLE Ur_locs}
		{CLEAR_VARIABLE Uu_locs}
		{CLEAR_VARIABLE Vu_locs}
		{CLEAR_VARIABLE Vud_locs}
		{CLEAR_VARIABLE Wwf_locs}
		{CLEAR_VARIABLE Wwg_locs}
		{CLEAR_VARIABLE Wwrg_locs}
		{CLEAR_VARIABLE offmap_locs}
[/event]
#enddef

#define VRA_CLEAR_BORDER VRA_TERRAIN
[store_locations]
	#terrain=Uu
	terrain=!,Xu,Qxu
	[not]
		x=1-50
		y=1-50
	[/not]
	variable=offmap_locs
[/store_locations]
[foreach]
	array=offmap_locs
	[do]
		[terrain]
			x,y=$this_item.x,$this_item.y
			terrain={VRA_TERRAIN}
			radius=2
			[filter_radius]
				#terrain=Uu,C*,K*
				terrain=Qxu,Xu,Uu
			[/filter_radius]
		[/terrain]
	[/do]
[/foreach]
{CLEAR_VARIABLE offmap_locs}
#enddef
