#textdomain wesnoth-Vaelia_Random_Adventures

#define VRA_FETCH_NEXT_MAP_EVENT
[event]
    name=vra_fetch_next_map
    first_time_only=no

    [set_variables]
        name=vra.fetch_next_map_choice
        mode=replace
        [split]
            list=$vra.fetch_next_map_choice_str
            key=map
            separator=,
            remove_empty=yes
        [/split]
    [/set_variables]

    # check if map list has entries
    [foreach]
        array=vra.fetch_next_map_choice
        variable=this_list
        [do]
            [if]
                {VARIABLE_CONDITIONAL this_list.map not_equals $null}
                [then]
                    {VARIABLE list_has_entries yes}
                    [break]
                    [/break]
                [/then]
            [/if]
        [/do]
    [/foreach]

    # if map list is empty, fill it.
    [if]
        {VARIABLE_CONDITIONAL list_has_entries not_equals yes}
        [then]
            {VARIABLE list ($vra.init_map)}
            [set_variables]
                name=vra.fetch_next_map_choice
                mode=replace
                [split]
                    list=$list
                    key=map
                    separator=,
                    remove_empty=yes
                [/split]
            [/set_variables]
            {CLEAR_VARIABLE list}
        [/then]
    [/if]
    {CLEAR_VARIABLE list_has_entries}
    [if]
        {VARIABLE_CONDITIONAL vra.map equals $null}
        [then]
            # randomly choose a map
            [set_variable]
                name=map_list
                [join]
                    variable=vra.fetch_next_map_choice
                    key=map
                    separator=,
                    remove_empty=yes
                [/join]
            [/set_variable]
            {VARIABLE_OP vra.map rand $map_list}
            {CLEAR_VARIABLE map_list}
        [/then]
    [/if]
    {LOOKUP_INDEX vra.fetch_next_map_choice map $vra.map index}
    {CLEAR_VARIABLE vra.fetch_next_map_choice[$index].map}
    {CLEAR_VARIABLE index}
    # Now that everything is in place, assemble the next scenario id
    {VARIABLE vra.next_scenario ("$vra.level|_$vra.abbrev|_$vra.map|")}

    [set_variable]
        name=vra.fetch_next_map_choice_str
        [join]
            variable=vra.fetch_next_map_choice
            key=map
            separator=,
            remove_empty=yes
        [/join]
    [/set_variable]

    {CLEAR_VARIABLE vra.fetch_next_map_choice}
    {CLEAR_VARIABLE vra.init_map}
    {CLEAR_VARIABLE vra.level}
    {CLEAR_VARIABLE vra.abbrev}
[/event]
#enddef

#define VRA_FETCH_NEXT_MAP_Sigurd
{VARIABLE vra.level 05}
{VARIABLE vra.abbrev urm}
{VARIABLE vra.init_map ({VRA_INIT_MAP_Sigurd})}
{VARIABLE vra.fetch_next_map_choice_str $vra.urm_map_choice}
[fire_event]
    name=vra_fetch_next_map
[/fire_event]
{VARIABLE vra.urm_map_choice $vra.fetch_next_map_choice_str}
{CLEAR_VARIABLE vra.fetch_next_map_choice_str}
#enddef

#define VRA_FETCH_NEXT_MAP_WCII
{VARIABLE vra.level 06}
{VARIABLE vra.abbrev wcii}
{VARIABLE vra.init_map ({VRA_INIT_MAP_WCII})}
{VARIABLE vra.fetch_next_map_choice_str $vra.wcii_map_choice}
[fire_event]
    name=vra_fetch_next_map
[/fire_event]
{VARIABLE vra.wcii_map_choice $vra.fetch_next_map_choice_str}
{CLEAR_VARIABLE vra.fetch_next_map_choice_str}
#enddef

#define VRA_FETCH_NEXT_MAP_Cave
{VARIABLE vra.level 04}
{VARIABLE vra.abbrev vra}
{VARIABLE vra.init_map ({VRA_INIT_MAP_Cave})}
{VARIABLE vra.fetch_next_map_choice_str $vra.cave_map_choice}
[fire_event]
    name=vra_fetch_next_map
[/fire_event]
{VARIABLE vra.cave_map_choice $vra.fetch_next_map_choice_str}
{CLEAR_VARIABLE vra.fetch_next_map_choice_str}
#enddef

#define VRA_FETCH_NEXT_MAP_Desert
{VARIABLE vra.level 02}
{VARIABLE vra.abbrev vra}
{VARIABLE vra.init_map ({VRA_INIT_MAP_Desert})}
{VARIABLE vra.fetch_next_map_choice_str $vra.desert_map_choice}
[fire_event]
    name=vra_fetch_next_map
[/fire_event]
{VARIABLE vra.desert_map_choice $vra.fetch_next_map_choice_str}
{CLEAR_VARIABLE vra.fetch_next_map_choice_str}
#enddef

#define VRA_FETCH_NEXT_MAP_Marsh
{VARIABLE vra.level 02}
{VARIABLE vra.abbrev vra}
{VARIABLE vra.init_map ({VRA_INIT_MAP_Marsh})}
{VARIABLE vra.fetch_next_map_choice_str $vra.marsh_map_choice}
[fire_event]
    name=vra_fetch_next_map
[/fire_event]
{VARIABLE vra.marsh_map_choice $vra.fetch_next_map_choice_str}
{CLEAR_VARIABLE vra.fetch_next_map_choice_str}
#enddef

#define VRA_FETCH_NEXT_MAP_Winter
{VARIABLE vra.level 02}
{VARIABLE vra.abbrev vra}
{VARIABLE vra.init_map ({VRA_INIT_MAP_Winter})}
{VARIABLE vra.fetch_next_map_choice_str $vra.winter_map_choice}
[fire_event]
    name=vra_fetch_next_map
[/fire_event]
{VARIABLE vra.winter_map_choice $vra.fetch_next_map_choice_str}
{CLEAR_VARIABLE vra.fetch_next_map_choice_str}
#enddef

#define VRA_FETCH_NEXT_MAP_Plain
{VARIABLE vra.level 02}
{VARIABLE vra.abbrev vra}
{VARIABLE vra.init_map ({VRA_INIT_MAP_Plain})}
{VARIABLE vra.fetch_next_map_choice_str $vra.plain_map_choice}
[fire_event]
    name=vra_fetch_next_map
[/fire_event]
{VARIABLE vra.plain_map_choice $vra.fetch_next_map_choice_str}
{CLEAR_VARIABLE vra.fetch_next_map_choice_str}
#enddef

#define VRA_FETCH_NEXT_MAP_Volcano
{VARIABLE vra.level 03}
{VARIABLE vra.abbrev vra}
{VARIABLE vra.init_map ({VRA_INIT_MAP_Volcano})}
{VARIABLE vra.fetch_next_map_choice_str $vra.volcano_map_choice}
[fire_event]
    name=vra_fetch_next_map
[/fire_event]
{VARIABLE vra.volcano_map_choice $vra.fetch_next_map_choice_str}
{CLEAR_VARIABLE vra.fetch_next_map_choice_str}
#enddef

#define VRA_RC_CHOOSE_ENEMY
[fire_event]
    name=vra_choose_enemy
[/fire_event]
#enddef

#define VRA_CHOOSE_ENEMY_EVENT
[event]
    name=vra_choose_enemy
    first_time_only=no

    first_time_only=no
    {VARIABLE vra.enemy_faced $vra.enemy_faced}
    [if]
      {VARIABLE_CONDITIONAL vra.enemy_faced equals $null}
    [then]
      {CLEAR_VARIABLE vra.enemy_faced}
      {VARIABLE vra.enemy_faced 0}
    [/then]
    [/if]

    # check if enemy list has entries
    [foreach]
        array=vra.enemy_choice.list
        variable=this_list
        [do]
            [if]
                {VARIABLE_CONDITIONAL this_list.enemy not_equals $null}
                [then]
                    {VARIABLE list_has_entries yes}
                    [break]
                    [/break]
                [/then]
            [/if]
        [/do]
    [/foreach]
    # if enemy list is empty, fill it.
    # It is vra.enemy_choice.list so that it is
    # easier to read in the :inspect listing
    [if]
        {VARIABLE_CONDITIONAL list_has_entries not_equals yes}
        [then]
            {VARIABLE list ({VRA_ENEMY_FACTIONS})}
            [set_variables]
                name=vra.enemy_choice.list
                mode=replace
                [split]
                    list=$list
                    key=enemy
                    separator=,
                    remove_empty=yes
                [/split]
            [/set_variables]
            {CLEAR_VARIABLE list}
        [/then]
    [/if]
    {CLEAR_VARIABLE list_has_entries}
    [if]
        {VARIABLE_CONDITIONAL vra.enemy equals $null}
        [then]
            # randomly choose a faction from the era
            # This section insures that no faction is repeated during the campaign until all have been chosen.
            # After a faction is chosen, it is removed from the array
            [set_variable]
                name=enemy_list
                [join]
                    variable=vra.enemy_choice.list
                    key=enemy
                    separator=,
                    remove_empty=yes
                [/join]
            [/set_variable]
            {VARIABLE_OP vra.enemy rand $enemy_list}
            {CLEAR_VARIABLE enemy_list}
        [/then]
    [/if]
    {LOOKUP_INDEX vra.enemy_choice.list enemy $vra.enemy index}
    {CLEAR_VARIABLE vra.enemy_choice.list[$index].enemy}
    {CLEAR_VARIABLE index}
    {VARIABLE_OP vra.enemy_faced add 1}
[/event]
#enddef

#define VRA_RESTATE_MAP_Sigurd MAP
{VARIABLE vra.urm_map_choice "{MAP},$vra.urm_map_choice"}
#enddef

#define VRA_RESTATE_MAP_WCII MAP
{VARIABLE vra.wcii_map_choice "{MAP},$vra.wcii_map_choice"}
#enddef

#define VRA_RESTATE_ENEMY VRA_TYPE
[set_variables]
	name=vra.enemy_choice.list
	mode=append
	[value]
		enemy={VRA_TYPE}
	[/value]
[/set_variables]
{VARIABLE_OP vra.enemy_faced sub 1}
#enddef

#define RESTORE_SIDE_TYPE SIDE
[store_side]
	variable=side_store
	side={SIDE}
[/store_side]
{VRA_RESTATE_ENEMY $side_store.side_name}
{CLEAR_VARIABLE side_store}
#enddef

#define VRA_RAND_CHOICE NUM
{VARIABLE vra.rand_choices ({NUM})}
[fire_event]
    name=vra_rand_choice
[/fire_event]
{CLEAR_VARIABLE vra.rand_choices}
#enddef

#define VRA_RAND_CHOICE_EVENT
[event]
    name=vra_rand_choice
    first_time_only=no

    [foreach]
        array=random_choice_arr.list
        variable=this_list
        [do]
            [if]
                {VARIABLE_CONDITIONAL this_list.choice not_equals $null}
                [then]
                    {VARIABLE list_has_entries yes}
                    [break]
                    [/break]
                [/then]
            [/if]
        [/do]
    [/foreach]

    [if]
        {VARIABLE_CONDITIONAL list_has_entries not_equals yes}
        [then]
            {VARIABLE list ($vra.rand_choices)}
            [set_variables]
                name=random_choice_arr.list
                mode=replace
                [split]
                    list=$list
                    key=choice
                    separator=,
                    remove_empty=yes
                [/split]
            [/set_variables]
            {CLEAR_VARIABLE list}
        [/then]
    [/if]
    {CLEAR_VARIABLE list_has_entries}
    [if]
        {VARIABLE_CONDITIONAL random_choice equals $null}
        [then]
            # randomly choose a choice
            [set_variable]
                name=choice_list
                [join]
                    variable=random_choice_arr.list
                    key=choice
                    separator=,
                    remove_empty=yes
                [/join]
            [/set_variable]
            {VARIABLE_OP random_choice rand $choice_list}
            {CLEAR_VARIABLE choice_list}
        [/then]
    [/if]
    {LOOKUP_INDEX random_choice_arr.list choice $random_choice index}
    {CLEAR_VARIABLE random_choice_arr.list[$index].choice}
    {CLEAR_VARIABLE index}
[/event]
#enddef
