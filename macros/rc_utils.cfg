#textdomain wesnoth-Vaelia_Random_Adventures

# The macros in this file handle the setup of the next scenario.
# This includes specifying the next level, and picking the next
# map, the enemy faction, and what gold and income levels are to
# be used for each side.

#define RC_FETCH_NEXT_MAP

    # This section insures that no map is repeated during the campaign
    # After a map is chosen, it is removed from the array
    # set_var map= will allow selecting of map
    # var is cleared in {RC_NEXT_SCENARIO}

    # check if map list has entries
    [foreach]
        array=map_choice.list
        variable=this_list
        [do]
            [if]
                {VARIABLE_CONDITIONAL this_list.map not_equals $null}
                [then]
                    {VARIABLE list_has_entries yes}
                    [break]
                    [/break]
                [/then]
            [/if]
        [/do]
    [/foreach]
    # if map list is empty, fill it.
    # It is map_choice.list so that it is
    # easier to read in the :inspect listing
    [if]
        {VARIABLE_CONDITIONAL list_has_entries not_equals yes}
        [then]
            {VARIABLE list "Cave,Plain,Winter,Marsh,Desert,Volcano"}
            [set_variables]
                name=map_choice.list
                mode=replace
                [split]
                    list=$list
                    key=map
                    separator=,
                    remove_empty=yes
                [/split]
            [/set_variables]
            {CLEAR_VARIABLE list}
        [/then]
    [/if]
    {CLEAR_VARIABLE list_has_entries}
    [if]
        {VARIABLE_CONDITIONAL map equals $null}
        [then]
            # randomly choose a map
            [set_variable]
                name=map_list
                [join]
                    variable=map_choice.list
                    key=map
                    separator=,
                    remove_empty=yes
                [/join]
            [/set_variable]
            {VARIABLE_OP map rand $map_list}
            {CLEAR_VARIABLE map_list}
        [/then]
    [/if]
    {LOOKUP_INDEX map_choice.list map $map index}
    {CLEAR_VARIABLE map_choice.list[$index].map}
    {CLEAR_VARIABLE index}
    {VARIABLE randomMap $map}
    {CLEAR_VARIABLE map}
#enddef

#define RC_CHOOSE_ENEMY
    # This section insures that no opponent is repeated during
    # the campaign until the list runs out of choices.
    # After an opponent is chosen, it is removed from the array
    # set_var enemy= will allow selecting of enemy
    # var is cleared in {RC_SIDE_ENEMY} in _sides.cfg

    # check if enemy list has entries
    [foreach]
        array=enemy_choice.list
        variable=this_list
        [do]
            [if]
                {VARIABLE_CONDITIONAL this_list.enemy not_equals $null}
                [then]
                    {VARIABLE list_has_entries yes}
                    [break]
                    [/break]
                [/then]
            [/if]
        [/do]
    [/foreach]
    # if enemy list is empty, fill it.
    # It is enemy_choice.list so that it is
    # easier to read in the :inspect listing
    [if]
        {VARIABLE_CONDITIONAL list_has_entries not_equals yes}
        [then]
            {VARIABLE list {VRA_ENEMY_FACTIONS}}
            [set_variables]
                name=enemy_choice.list
                mode=replace
                [split]
                    list=$list
                    key=enemy
                    separator=,
                    remove_empty=yes
                [/split]
            [/set_variables]
            {CLEAR_VARIABLE list}
        [/then]
    [/if]
    {CLEAR_VARIABLE list_has_entries}
    [if]
        {VARIABLE_CONDITIONAL enemy equals $null}
        [then]
            # randomly choose a faction from the era
            # This section insures that no faction is repeated during the campaign until all have been chosen.
            # After a faction is chosen, it is removed from the array
            [set_variable]
                name=enemy_list
                [join]
                    variable=enemy_choice.list
                    key=enemy
                    separator=,
                    remove_empty=yes
                [/join]
            [/set_variable]
            {VARIABLE_OP enemy rand $enemy_list}
            {CLEAR_VARIABLE enemy_list}
        [/then]
    [/if]
    {LOOKUP_INDEX enemy_choice.list enemy $enemy index}
    {CLEAR_VARIABLE enemy_choice.list[$index].enemy}
    {CLEAR_VARIABLE index}
    {VARIABLE randomHero $enemy}
    {CLEAR_VARIABLE enemy}

    # Now that everything is in place, the contents of
    # enemy var will be used in {RC_SIDE_ENEMY} in
    # the next scenario.
#enddef

#define VRA_RESTATE_ENEMY VRA_TYPE
[set_variables]
	name=enemy_choice.list
	mode=append
	[value]
		enemy={VRA_TYPE}
	[/value]
[/set_variables]
#enddef

#define RESTORE_SIDE_TYPE SIDE
[store_unit]
	variable=side_store
	[filter]
		side={SIDE}
		canrecruit=yes
	[/filter]
[/store_unit]
{VRA_RESTATE_ENEMY $side_store.name}
{CLEAR_VARIABLE side_store}
#enddef


#define VRA_RAND_SIDE NUM
    [foreach]
        array=rside_choice.list
        variable=this_list
        [do]
            [if]
                {VARIABLE_CONDITIONAL this_list.rside not_equals $null}
                [then]
                    {VARIABLE list_has_entries yes}
                    [break]
                    [/break]
                [/then]
            [/if]
        [/do]
    [/foreach]

    [if]
        {VARIABLE_CONDITIONAL list_has_entries not_equals yes}
        [then]
            {VARIABLE list ({NUM})}
            [set_variables]
                name=rside_choice.list
                mode=replace
                [split]
                    list=$list
                    key=rside
                    separator=,
                    remove_empty=yes
                [/split]
            [/set_variables]
            {CLEAR_VARIABLE list}
        [/then]
    [/if]
    {CLEAR_VARIABLE list_has_entries}
    [if]
        {VARIABLE_CONDITIONAL rside equals $null}
        [then]
            # randomly choose a rside
            [set_variable]
                name=rside_list
                [join]
                    variable=rside_choice.list
                    key=rside
                    separator=,
                    remove_empty=yes
                [/join]
            [/set_variable]
            {VARIABLE_OP rside rand $rside_list}
            {CLEAR_VARIABLE rside_list}
        [/then]
    [/if]
    {LOOKUP_INDEX rside_choice.list rside $rside index}
    {CLEAR_VARIABLE rside_choice.list[$index].rside}
    {CLEAR_VARIABLE index}
    {VARIABLE random_side $rside}
    {CLEAR_VARIABLE rside}
#enddef
