#textdomain wesnoth-Vaelia_Random_Adventures

#define NEED_VAELIA PLACEMENT
[unit]
	side=1
	# internal leader id value
	id=Vaelia
	# type of leader
	type=$player_type_leader
	extra_recruit=$player_type_leader
	# name of the leader
	name= _ "Vaelia"
	#generate_name=yes
	# name is unchangable
	#unrenameable=yes
	random_traits=no
	random_gender=yes
	# if the leader of this side can recruit
	canrecruit=yes
	#facing=se
	#placement=map,leader
	#(x,y=recall,recall)
	#location_id=1
        {PLACEMENT}
[/unit]
#enddef

#define STORE_VAELIA
    [if]
        [have_unit]
            side=1
            id=Vaelia
            search_recall_list=yes
        [/have_unit]
        [then]
            [store_unit]
                [filter]
                    side=1
                    id=Vaelia
                [/filter]
                kill=yes
                variable=vaelia_store
            [/store_unit]
        [/then]
    [/if]
#enddef

#define RESTORE_VAELIA
    [if]
        [variable]
            name=vaelia_store.id
            equals="Vaelia"
        [/variable]
        [then]
            [unstore_unit]
                variable=vaelia_store
                x,y=recall,recall
            [/unstore_unit]
            {CLEAR_VARIABLE vaelia_store}
        [/then]
    [/if]
#enddef

#define VRA_STORE_START SIDE
[store_starting_location]
	side={SIDE}
	variable=side_start
[/store_starting_location]
{VARIABLE start_{SIDE}_x $side_start.x}
{VARIABLE start_{SIDE}_y $side_start.y}
{CLEAR_VARIABLE side_start}
#enddef

#define VRA_LOOT X Y EASY_AMOUNT NORMAL_AMOUNT HARD_AMOUNT SIDE
    {VRA_VAR amount_gold {EASY_AMOUNT} {NORMAL_AMOUNT} {HARD_AMOUNT}}

    [gold]
        side={SIDE}
        amount=$amount_gold
    [/gold]

    [floating_text]
      x,y={X},{Y}
      text= _ "$|$amount_gold|"
    [/floating_text]
    [delay]
      time=500
    [/delay]

    {CLEAR_VARIABLE amount_gold}
#enddef


#define VRA_AI_SIDE SIDE
	[side]
		side={SIDE}
		controller=ai
		# Place leader, grant gold, income and recruits later
		no_leader=yes
		gold=0
		faction=Custom
		# {NO_INCOME}
		income=0
		# Set ai values later
	[/side]
#enddef

#define VRA_CLEAR_ADJACENT VRA_RADIUS VRA_TERRAIN VRA_SIDE
[store_locations]
	[and]
	[filter]
		side={VRA_SIDE}
		canrecruit=yes
	[/filter]

	radius={VRA_RADIUS}

	#                [filter_radius]
	#                    terrain=X*
	#                    terrain=C*,K*
	#                [/filter_radius]
	[/and]

	[not]
	[filter]
		side={VRA_SIDE}
		canrecruit=yes
	[/filter]
	[/not]

	[not]
		terrain=C*,K*,U*,Gg,Re
	[/not]

	variable=adjacent_cavewall
[/store_locations]

[foreach]
	array=adjacent_cavewall
	[do]
		[terrain]
			x,y=$this_item.x,$this_item.y
			terrain={VRA_TERRAIN}
		[/terrain]
	[/do]
[/foreach]

{CLEAR_VARIABLE adjacent_cavewall}
#enddef

#define VRA_FREEZE_AI_EVENT
[event]
	name=turn 1 refresh
	first_time_only=no

	[filter_condition]
		[have_unit]
			side=$side_number
			[and]
				canrecruit=yes
			[/and]
			[and]
				[not]
					side=1
				[/not]
			[/and]
			search_recall_list=yes
		[/have_unit]
	[/filter_condition]

	# Freeze leaders
	# Incase in grabbing a village the leader would spawn indigs that could kill her on turn 1
	[modify_unit]
		[filter]
			side=$side_number
			canrecruit=yes
		[/filter]
		moves=0
		attacks_left=0
	[/modify_unit]
[/event]
#enddef

#define VRA_GAME_EVENTS
{VRA_FREEZE_AI_EVENT}
#enddef

#define VRA_SIDE_ONE
[side]
	# Scenario sides
	# https://wiki.wesnoth.org/SideWML

	# Starting postion on the map is set inside the map file as "1 Kh"
	# Human player is side 1
	side=1
	side_name=_"Vaelia"

	# possible values are human or ai
	controller=human

	# id from previous scenario
	save_id=Vaelia

	persistent=yes

	faction=Custom
	# types that leader can recruit
	#recruit="Elvish Fighter, My Wesnoth Unit"
	recruit=

	# starting gold space separated for different difficulties
	gold=0
	{VRA_GAME_INCOME}
	#{INCOME 2 0 -2}
	# {NO_INCOME}

	# internal unseen team names. all sides with the same team_name are allies.
	team_name=VaeliaTeam
	user_team_name= _ "Vaelia Allies"

	{VRA_GAME_SHROUD}
	{VRA_GAME_FOG}
	share_vision="none"

	# Place leader, grant gold, income and recruits later
	no_leader=yes
	defeat_condition=no_leader_left

	#[unit] stuff
	# internal side leader id value
	#id=Vaelia

	# name of the leader
	#name= _ "Vaelia"

	# type of leader
	#type=

	# name is unchangable
	#unrenameable=yes
	#random_traits=yes
	#random_gender=yes

	# if the leader of this side can recruit
	#canrecruit=yes
[/side]
#enddef

#define VRA_SIDE_ONE_LEADER
	[store_unit]
		[filter]
			side=1
			id=Vaelia
		[/filter]
		kill=yes
		variable=vaelia_store
	[/store_unit]

	[if]
		[variable]
			name=vaelia_store.id
			not_equals="Vaelia"
		[/variable]
	[then]
	{VARIABLE list ({VRA_GAME_VAELIA_TYPE})}

	[set_variables]
		name=player_type_arr
		mode=replace
		[split]
			list=$list
			key=type
			separator=,
			remove_empty=yes
		[/split]
	[/set_variables]
	{CLEAR_VARIABLE list}

	[if]
		{VARIABLE_CONDITIONAL player_type_arr.length numerical_equals 0}
	[then]
		# Random type
		{CLEAR_VARIABLE player_type_arr}
		{VARIABLE list ({VRA_GAME_VAELIA_RANDOM_TYPE})}
		[set_variables]
			name=player_type_arr
			mode=replace
			[split]
				list=$list
				key=type
				separator=,
				remove_empty=yes
			[/split]
		[/set_variables]
		{CLEAR_VARIABLE list}
	[/then]
	[/if]

	# make a clean list
	[set_variable]
		name=player_type_list
		[join]
			variable=player_type_arr
			key=type
			separator=,
			remove_empty=yes
		[/join]
	[/set_variable]

	# pick a random type
	{VARIABLE_OP player_type_leader rand $player_type_list}
	{CLEAR_VARIABLE player_type_arr}
	{CLEAR_VARIABLE player_type_list}

	{NEED_VAELIA (location_id=1)}
	{CLEAR_VARIABLE player_type_leader}
	[/then]
	[else]
#        [store_locations]
#                location_id=1
#                variable=starting_store
#        [/store_locations]
	[store_starting_location]
		side=1
		variable=starting_store
	[/store_starting_location]
	[unstore_unit]
		variable=vaelia_store
		x,y=$starting_store.x,$starting_store.y
	[/unstore_unit]
	{CLEAR_VARIABLE starting_store}
	[/else]
	[/if]

	{CLEAR_VARIABLE vaelia_store}
#enddef

#define VRA_SIDE_ONE_GOLD
	[store_side]
		side=1
		variable=side_one
	[/store_side]

	[set_variables]
		name=player_recruit_types_arr
		mode=replace
		[split]
			list=$side_one.recruit
			key=type
			separator=,
			remove_empty=yes
		[/split]
	[/set_variables]
	{CLEAR_VARIABLE side_one}

	{VRA_GAME_GOLD_FACTOR}

	[set_variable]
		name=player_gold
		value=0
	[/set_variable]
	[set_variable]
		name=player_recruit_cost
		value=0
	[/set_variable]
	[foreach]
		array=player_recruit_types_arr
		[do]
		[if]
		        {VARIABLE_CONDITIONAL this_item.type not_equals $null}
		[then]
			[store_unit_type]
				type=$this_item.type
				variable=player_type
			[/store_unit_type]
			{VARIABLE_OP player_recruit_cost add $player_type.cost}
			{CLEAR_VARIABLE player_type}
		[/then]
		[/if]
		[/do]
	[/foreach]
	[if]
		{VARIABLE_CONDITIONAL player_recruit_types_arr.length greater_than 0}
	[then]
		{VARIABLE_OP player_recruit_cost divide $player_recruit_types_arr.length}
		{VARIABLE_OP player_recruit_cost round 0}
		{VARIABLE_OP player_gold add $player_recruit_cost}
		{VARIABLE_OP player_gold multiply $vra.game_gold_factor}
	[/then]
	[/if]
	{CLEAR_VARIABLE player_recruit_types_arr}

	[store_gold]
		side=1
		variable=gold_store
	[/store_gold]

	[if]
		{VARIABLE_CONDITIONAL player_gold greater_than $gold_store}
	[then]
		{VARIABLE_OP player_gold sub $gold_store}
		[gold]
			side=1
			amount=$player_gold
		[/gold]
	[/then]
	[/if]

	{CLEAR_VARIABLE gold_store}
	{CLEAR_VARIABLE vra.game_gold_factor}
	{CLEAR_VARIABLE player_gold}
	{CLEAR_VARIABLE player_recruit_cost}
#enddef

#define VRA_ENDLEVEL_GOTO
				[endlevel]
					result=victory
					next_scenario=$vra.next_scenario
					carryover_report=no
					bonus=no
					linger_mode=no
					carryover_add=no
					carryover_percentage=100
				[/endlevel]
#enddef

#define VRA_SELECT_ENDLEVEL_EVENT
[event]
name=vra_select_endlevel
first_time_only=no

[switch]
	variable=weapon.map
	[case]
		value=WCII
		{CLEAR_VARIABLE vra.map}

		{VARIABLE vra.level 6}
		{VRA_WCII_FETCH_NEXT_MAP}

		[message]
			speaker=unit
			message=$weapon.map_message + " " + $vra.map + "."

			[option]
			label=_"Yes, go to $vra.map|."
			default=yes

			[command]
				{VRA_ENDLEVEL_GOTO}
			[/command]
			[/option]

			[option]
			label=_"Not $vra.map|, try elsewhere."
			[command]
				[fire_event]
					name=moveto
					[primary_unit]
						id=$unit.id
					[/primary_unit]
				[/fire_event]
			[/command]
			[/option]

			[option]
			label=_"No, back out."
			[command]
				{VRA_RESTATE_WCII_MAP $vra.map}
				[allow_undo]
				[/allow_undo]
				#[break][/break]
			[/command]
			[/option]
		[/message]
		{CLEAR_VARIABLE vra.map}
		{CLEAR_VARIABLE vra.level}
		{CLEAR_VARIABLE vra.next_scenario}
	[/case]
	[case]
		value=Sigurd
		{CLEAR_VARIABLE vra.map}

		{VARIABLE vra.level 5}
		{VRA_URM_FETCH_NEXT_MAP}

		[message]
			speaker=unit
			message=$weapon.map_message + " " + $vra.map + "."

			[option]
			label=_"Yes, go to $vra.map|."
			default=yes

			[command]
				{VRA_ENDLEVEL_GOTO}
			[/command]
			[/option]

			[option]
			label=_"Not $vra.map|, try elsewhere."
			[command]
				[fire_event]
					name=moveto
					[primary_unit]
						id=$unit.id
					[/primary_unit]
				[/fire_event]
			[/command]
			[/option]

			[option]
			label=_"No, back out."
			[command]
				{VRA_RESTATE_MAP $vra.map}
				[allow_undo]
				[/allow_undo]
				#[break][/break]
			[/command]
			[/option]
		[/message]
		{CLEAR_VARIABLE vra.map}
		{CLEAR_VARIABLE vra.level}
		{CLEAR_VARIABLE vra.next_scenario}
	[/case]
	[case]
		value=Cave
		{CLEAR_VARIABLE vra.map}

		{VARIABLE vra.level 4}
		{VRA_CAVE_FETCH_NEXT_MAP}

		[message]
			speaker=unit
			message=$weapon.map_message
			[option]
			label=_"Yes, go to Cave."
			default=yes

			[command]
				{VRA_ENDLEVEL_GOTO}
			[/command]
			[/option]

			[option]
			label=_"No, back out."
			[command]
				[allow_undo]
				[/allow_undo]
			[/command]
			[/option]
		[/message]
		{CLEAR_VARIABLE vra.map}
		{CLEAR_VARIABLE vra.level}
		{CLEAR_VARIABLE vra.next_scenario}
	[/case]
	[case]
		value=Plain
		{CLEAR_VARIABLE vra.map}

		{VARIABLE vra.level 2}
		{VRA_PLAIN_FETCH_NEXT_MAP}

		[message]
			speaker=unit
			message=$weapon.map_message
			[option]
			label=_"Yes, go to Plain."
			default=yes

			[command]
				{VRA_ENDLEVEL_GOTO}
			[/command]
			[/option]

			[option]
			label=_"No, back out."
			[command]
				[allow_undo]
				[/allow_undo]
			[/command]
			[/option]
		[/message]
		{CLEAR_VARIABLE vra.map}
		{CLEAR_VARIABLE vra.level}
		{CLEAR_VARIABLE vra.next_scenario}
	[/case]
	[case]
		value=Marsh
		{CLEAR_VARIABLE vra.map}

		{VARIABLE vra.level 2}
		{VRA_MARSH_FETCH_NEXT_MAP}

		[message]
			speaker=unit
			message=$weapon.map_message
			[option]
			label=_"Yes, go to Marsh."
			default=yes

			[command]
				{VRA_ENDLEVEL_GOTO}
			[/command]
			[/option]

			[option]
			label=_"No, back out."
			[command]
				[allow_undo]
				[/allow_undo]
			[/command]
			[/option]
		[/message]
		{CLEAR_VARIABLE vra.map}
		{CLEAR_VARIABLE vra.level}
		{CLEAR_VARIABLE vra.next_scenario}
	[/case]
	[case]
		value=Desert
		{CLEAR_VARIABLE vra.map}

		{VARIABLE vra.level 2}
		{VRA_DESERT_FETCH_NEXT_MAP}

		[message]
			speaker=unit
			message=$weapon.map_message
			[option]
			label=_"Yes, go to Desert."
			default=yes

			[command]
				{VRA_ENDLEVEL_GOTO}
			[/command]
			[/option]

			[option]
			label=_"No, back out."
			[command]
				[allow_undo]
				[/allow_undo]
			[/command]
			[/option]
		[/message]
		{CLEAR_VARIABLE vra.map}
		{CLEAR_VARIABLE vra.level}
		{CLEAR_VARIABLE vra.next_scenario}
	[/case]
	[case]
		value=Winter
		{CLEAR_VARIABLE vra.map}

		{VARIABLE vra.level 2}
		{VRA_WINTER_FETCH_NEXT_MAP}

		[message]
			speaker=unit
			message=$weapon.map_message
			[option]
			label=_"Yes, go to Winter."
			default=yes

			[command]
				{VRA_ENDLEVEL_GOTO}
			[/command]
			[/option]

			[option]
			label=_"No, back out."
			[command]
				[allow_undo]
				[/allow_undo]
			[/command]
			[/option]
		[/message]
		{CLEAR_VARIABLE vra.map}
		{CLEAR_VARIABLE vra.level}
		{CLEAR_VARIABLE vra.next_scenario}
	[/case]
	[case]
		value=Volcano
		{CLEAR_VARIABLE vra.map}

		[message]
			speaker=unit
			message=$weapon.map_message
			[option]
			label=_"Yes, go to Volcano."
			default=yes

			[command]
				{VARIABLE_OP do_cave rand "0..1"}
				[if]
					{VARIABLE_CONDITIONAL do_cave numerical_equals 1}
				[then]
					[endlevel]
						result=victory
						next_scenario=03_vra_VolcanoNorth
						carryover_report=no
						bonus=no
						linger_mode=no
						carryover_add=no
						carryover_percentage=100
					[/endlevel]
				[/then]
				[else]
					[endlevel]
						result=victory
						next_scenario=03_vra_VolcanoSouth
						carryover_report=no
						bonus=no
						linger_mode=no
						carryover_add=no
						carryover_percentage=100
					[/endlevel]
				[/else]
				[/if]
				{CLEAR_VARIABLE do_cave}
			[/command]
			[/option]

			[option]
			label=_"No, back out."
			[command]
				[allow_undo]
				[/allow_undo]
			[/command]
			[/option]
		[/message]
		{CLEAR_VARIABLE do_cave}
		{CLEAR_VARIABLE vra.map}
	[/case]
[/switch]
{CLEAR_VARIABLE vra.map}
{CLEAR_VARIABLE vra.level}
{CLEAR_VARIABLE vra.next_scenario}
[/event]
#enddef

#define VRA_NEXT_ENDLEVEL
[switch]
	variable=vra.map
	[case]
		value=Bonus
		{CLEAR_VARIABLE vra.map}

		[modify_side]
			side=1
			fog=no
			shroud=no
		[/modify_side]
		[endlevel]
			result=victory
			next_scenario=01_vra_select
			bonus=yes
			carryover_add=no
			{VRA_VOLCANO_CARRY_OVER}
			carryover_report=yes
			linger_mode=yes
			reveal_map=yes
		[/endlevel]
	[/case]
	[else]
		{CLEAR_VARIABLE vra.map}

		[modify_side]
			side=1
			fog=no
			shroud=no
		[/modify_side]
		[endlevel]
			result=victory
			next_scenario=01_vra_select
			bonus=no
			carryover_add=no
			{VRA_GAME_CARRY_OVER}
			carryover_report=yes
			linger_mode=yes
			reveal_map=yes
		[/endlevel]
	[/else]
[/switch]
{CLEAR_VARIABLE vra.map}
#enddef

#define VRA_ENEMIES_DEFEATED
[event]
	name=enemies defeated

	{CLEAR_VARIABLE vra.map}
	{VRA_NEXT_ENDLEVEL}
[/event]
#enddef

#define VRA_CLEAR_VARIABLES_VICTORY
[event]
	name=victory

	{CLEAR_VARIABLE scatter_arr}
	{CLEAR_VARIABLE debbie}
[/event]
#enddef

#define VRA_CLEAR_VARIABLES_DEFEAT
[event]
	name=defeat

	{VRA_CLEAR_VARIABLES}
[/event]
#enddef

#define VRA_CLEAR_VARIABLES
{CLEAR_VARIABLE debbie}
{CLEAR_VARIABLE scatter_arr}
{CLEAR_VARIABLE lava_body}
{CLEAR_VARIABLE lava_count}
{CLEAR_VARIABLE vra}
{CLEAR_VARIABLE dialog}
#enddef

#define VRA_ROUND_COUNTER
{VARIABLE_OP vra.round add 1}
#enddef

#define VRA_OBJECTIVES
# Game objectives in red and green
[objectives]
	side=1
	#delayed_variable_substitution=yes #so vra.round note works correctly when using debug
	# objective condition have 2 values either win or lose.
	[objective]
		condition=win
		description= _ "Defeat enemy leader(s)"
	[/objective]

	[objective]
		condition=win
		description= _ "Resist until turns run out"
		show_turn_counter=yes
	[/objective]

	[objective]
		condition=lose
		description= _ "Death of Vaelia"
		[show_if]
			{VARIABLE_CONDITIONAL vra.round less_than_equal_to 8}
		[/show_if]
	[/objective]

	[objective]
		{ALTERNATIVE_OBJECTIVE_CAPTION}
		condition=win
		description= _ "Death of Vaelia"
		[show_if]
			{VARIABLE_CONDITIONAL vra.round greater_than_equal_to 9}
		[/show_if]
	[/objective]

	[gold_carryover]
		{VRA_GAME_CARRY_OVER}
		bonus=no
	[/gold_carryover]

	[note]
		description="<b>" + _ "Round $vra.round|." + "</b>"
	[/note]

	#{HAS_NO_TURN_LIMIT}
	#{TURNS_RUN_OUT}

	# No {IS_LAST_SCENARIO}, because the player can win and keep on playing
[/objectives]
#enddef

#define VRA_FACTION_CASE VRA_SIDE_LEADER VRA_SIDE_NUMBER
	[case]
	value={VRA_SIDE_LEADER}

	{VARIABLE vra.enemy_levelup $vra.enemy_levelup}
	[if]
		{VARIABLE_CONDITIONAL vra.enemy_levelup equals $null}
	[then]
		{CLEAR_VARIABLE vra.enemy_levelup}
		{VARIABLE vra.enemy_levelup no}
	[/then]
	[/if]

	{VARIABLE list ({VRA_RECRUIT_{VRA_SIDE_LEADER}})}

	[set_variables]
		name=enemy_recruit_arr
		mode=replace
		[split]
			list=$list
			key=type
			separator=,
			remove_empty=yes
		[/split]
	[/set_variables]
	{CLEAR_VARIABLE list}

	[if]
		{VARIABLE_CONDITIONAL enemy_recruit_arr.length numerical_equals 0}
	[then]
		# Doppelganger
		{CLEAR_VARIABLE enemy_recruit_arr}
		[store_side]
			side=1
			variable=side_store
		[/store_side]
		[set_variables]
			name=enemy_recruit_arr
			mode=replace
			[split]
				list=$side_store.recruit
				key=type
				separator=,
				remove_empty=yes
			[/split]
		[/set_variables]
		{CLEAR_VARIABLE side_store}
	[/then]
	[/if]

	# make a clean list
	[set_variable]
		name=enemy_recruit_list
		[join]
			variable=enemy_recruit_arr
			key=type
			separator=,
			remove_empty=yes
		[/join]
	[/set_variable]

	# pick a random type
	{VARIABLE_OP enemy_recruit_leader rand $enemy_recruit_list}
	{CLEAR_VARIABLE enemy_recruit_arr}

	[if]
		{VARIABLE_CONDITIONAL vra.enemy_levelup equals yes}
	[then]
	# upgrade type
	[store_unit_type]
		type=$enemy_recruit_leader
		variable=enemy_leader
	[/store_unit_type]
	[if]
		{VARIABLE_CONDITIONAL enemy_leader.advances_to not_equals null}
		[then]
			{CLEAR_VARIABLE enemy_recruit_leader}
			{VARIABLE_OP enemy_recruit_leader rand $enemy_leader.advances_to}
		[/then]
	[/if]
	{CLEAR_VARIABLE enemy_leader}
	[/then]
	[/if]

	[unit]
		side={VRA_SIDE_NUMBER}
		type=$enemy_recruit_leader
		id={VRA_SIDE_LEADER}{VRA_SIDE_NUMBER}
		name="{VRA_SIDE_LEADER}"
		#generate_name=yes
		random_traits=yes
		random_gender=yes
		location_id={VRA_SIDE_NUMBER}
		canrecruit=yes
		facing=se
	[/unit]
	{CLEAR_VARIABLE enemy_recruit_leader}

	#make an array of cleaned recruit list
	[set_variables]
		name=enemy_original_arr
		mode=replace
		[split]
			list=$enemy_recruit_list
			key=type
			separator=,
			remove_empty=yes
		[/split]
	[/set_variables]
	{CLEAR_VARIABLE enemy_recruit_list}

	# build a new recruit array
	{CLEAR_VARIABLE enemy_new_arr}
	[foreach]
		array=enemy_original_arr
		[do]
		[if]
		        {VARIABLE_CONDITIONAL this_item.type not_equals $null}
		[then]
			# add original type
			[set_variable]
				name=enemy_new_arr[$enemy_new_arr.length].type
				value=$this_item.type
			[/set_variable]
			[if]
				{VARIABLE_CONDITIONAL vra.enemy_levelup equals yes}
			[then]
			[store_unit_type]
				type=$this_item.type
				variable=enemy_type
			[/store_unit_type]
			[if]
				{VARIABLE_CONDITIONAL enemy_type.advances_to not_equals null}
			[then]
				[set_variables]
					name=enemy_adv_arr
					mode=replace
					[split]
						list=$enemy_type.advances_to
						key=type
						separator=,
						remove_empty=yes
					[/split]
				[/set_variables]
				[foreach]
					array=enemy_adv_arr
					variable=inner_item
					[do]
					[if]
					{VARIABLE_CONDITIONAL inner_item.type not_equals $null}
					[then]
					# add leveled up types
					[set_variable]
						name=enemy_new_arr[$enemy_new_arr.length].type
						value=$inner_item.type
					[/set_variable]
					[/then]
					[/if]
					[/do]
				[/foreach]
				{CLEAR_VARIABLE enemy_adv_arr}
			[/then]
			[/if]
			{CLEAR_VARIABLE enemy_type}
			[/then]
			[/if]
		[/then]
		[/if]
		[/do]
	[/foreach]

	# create a new recruit list string (third time)
	[set_variable]
		name=enemy_recruit_list
		[join]
			variable=enemy_new_arr
			key=type
			separator=,
			remove_empty=yes
		[/join]
	[/set_variable]
	{CLEAR_VARIABLE enemy_new_arr}
	{CLEAR_VARIABLE enemy_original_arr}

	[modify_side]
		side={VRA_SIDE_NUMBER}
		recruit=$enemy_recruit_list
	[/modify_side]
	{CLEAR_VARIABLE enemy_recruit_list}

	# hack to get rid of duplicate types
	[store_side]
		side={VRA_SIDE_NUMBER}
		variable=side_store
	[/store_side]
	[set_variables]
		name=enemy_recruit_types_arr
		mode=replace
		[split]
			list=$side_store.recruit
			key=type
			separator=,
			remove_empty=yes
		[/split]
	[/set_variables]
	{CLEAR_VARIABLE side_store}

	#Calculate Cost
	{VRA_GAME_ENEMY_GOLD_FACTOR}
	#Add units to side recall,recall and set enemy_gold, enemy_recruit_cost variables
	[set_variable]
		name=enemy_gold
		value=0
	[/set_variable]
	[set_variable]
		name=enemy_recruit_cost
		value=0
	[/set_variable]
	[foreach]
		array=enemy_recruit_types_arr
		[do]
		[if]
		        {VARIABLE_CONDITIONAL this_item.type not_equals $null}
		[then]
			[store_unit_type]
				type=$this_item.type
				variable=enemy_type
			[/store_unit_type]
			{VARIABLE_OP enemy_recruit_cost add $enemy_type.cost}
			# doesn't always recall
			[unit]
				side={VRA_SIDE_NUMBER}
				type=$this_item.type
				#type=$enemy_type.id
				x,y=recall,recall
				generate_name=yes
				random_gender=yes
				random_traits=no
				[modifications]
					{TRAIT_LOYAL}
				[/modifications]
				{IS_LOYAL}
			[/unit]
			{CLEAR_VARIABLE enemy_type}
		[/then]
		[/if]
		[/do]
	[/foreach]
	[if]
		{VARIABLE_CONDITIONAL enemy_recruit_types_arr.length greater_than 0}
	[then]
		{VARIABLE_OP enemy_recruit_cost divide $enemy_recruit_types_arr.length}
		{VARIABLE_OP enemy_recruit_cost round 0}
		{VARIABLE_OP enemy_gold add $enemy_recruit_cost}
		{VARIABLE_OP enemy_gold multiply $vra.game_enemy_gold_factor}
	[/then]
	[/if]
	{CLEAR_VARIABLE enemy_recruit_types_arr}
	{CLEAR_VARIABLE vra.game_enemy_gold_factor}

	{VRA_GAME_ENEMY_RECRUIT_LIMIT}
	[modify_side]
		side={VRA_SIDE_NUMBER}
		side_name={VRA_SIDE_LEADER}
		team_name={VRA_SIDE_LEADER}{VRA_SIDE_NUMBER}
		user_team_name= _ "{VRA_SIDE_LEADER}{VRA_SIDE_NUMBER}"
		fog=yes
		share_vision="none"
		#scroll_to_leader=no
		# Shroud for enemy gave an error
		#shroud=yes
		# {FLAG_VARIANT knalgan}
		# {FLAG_VARIANT loyalist}
		# {FLAG_VARIANT wood-elvish}
		# {FLAG_VARIANT6 ragged}

		gold=$enemy_gold
		{VRA_GAME_ENEMY_INCOME}
		# this did not work :(
		# recall_cost=$enemy_recruit_cost

		#gold="$(min( [250, ($vra.game_gold * $vra.round) ]))"
		#income="$(min( [{VRA_GAME_INCOME}, ({VRA_GAME_INCOME} + $vra.round) ]))"

		[ai]
#ifdef ENABLE_EXP_AI
			ai_algorithm=experimental_ai
#endif
			# aggression="$(min( [1.0, (0.3 + 0.1 * $vra.round) ] ) )"
			# villages_per_scout=8
			# village_value=1
			# leader_value=1
			# attack_depth=5
			# recruitment_randomness=50 #(int) A random value between 0 and recruitment_randomness is added to each score. Use a high value, such as '200', to increase randomness.
			recruitment_diversity=5.0 #2.0 (double) When this value is high, the AI recruits more units which are currently rare on the map. When the value is 0.0, the AI only recruits the best unit. set to 3.0 in Secrets_of_the_Ancients/scenarios/10_Merfolk_Revenge.cfg

#ifdef AVOID_KEEP
			[avoid]
				x,y=24-26,24-26
			[/avoid]
#endif

#ifdef AVOID_LAVA
			[avoid]
				terrain=Mv,Qxu,Ql
			[/avoid]
#endif

#ifdef AVOID_KEEP_LAVA
			[avoid]
				x,y=24-26,24-26
				[or]
					terrain=Mv,Qxu,Ql
				[/or]
			[/avoid]
#endif
		[aspect]
		id=recruitment_instructions
		[facet]
			[value]
#				[recruit]
#					type=
#					number=12
#					total=yes
#					blocker=no
#				[/recruit]
				[limit]
					# empty type means all units
					type=
					max=$vra.game_enemy_recruit_limit
				[/limit]
				# Do not forget to include the default
				# [recruit]-tag. Otherwise the AI won't
				# recruit anything.
				[recruit]
					importance=0
				[/recruit]
			[/value]
		[/facet]
		[/aspect]
		[/ai]
	[/modify_side]
	{CLEAR_VARIABLE enemy_gold}
	{CLEAR_VARIABLE enemy_recruit_cost}
	{CLEAR_VARIABLE vra.game_enemy_recruit_limit}
	[/case]
#enddef

#define VRA_SETUP_SIDE  VRA_SIDE_NUMBER
	{VRA_RC_CHOOSE_ENEMY}

	[switch]
		variable=vra.enemy

	{VRA_ENEMY_CASE {VRA_SIDE_NUMBER}}
	[/switch]

	{CLEAR_VARIABLE vra.enemy}
#enddef

#define VRA_SWITCH_ALLIANCE VRA_SIDE_NUMBER
	[modify_side]
		side={VRA_SIDE_NUMBER}
		team_name=VaeliaTeam
		user_team_name= _ "Vaelia Allies"
	[/modify_side]
#enddef

#define VRA_TIMES_UP
	[event]
		# Spaces in event names can be interchanged with underscores.
		# triggered when you run out of turns.
		name=time over
		[message]
			speaker=Vaelia
			message= _ "Fallback and regroup..."
		[/message]
		{CLEAR_VARIABLE vra.map}
		{VRA_NEXT_ENDLEVEL}
	[/event]
#enddef

#define VRA_HERO_DIE
	[event]
		name=die
		[filter]
			id=Vaelia
		[/filter]

		[if]
			{VARIABLE_CONDITIONAL vra.round greater_than_equal_to 9}
			[then]
				[endlevel]
					next_scenario=null
					carryover_report=no
					bonus=no
					save=no
					linger_mode=no
				[/endlevel]
				{VRA_CLEAR_VARIABLES}
			[/then]

			# Normal defeat condition before sufficient repetitions
			[else]
				[endlevel]
					result=defeat
				[/endlevel]
			[/else]
		[/if]
	[/event]
#enddef

#define VRA_SPEECH_EVENTS
[event]
	name=last breath
	first_time_only=no
	[filter]
		canrecruit=no
	[/filter]
	[filter_second]
		[not]
		id=$unit.id
		[/not]
	[/filter_second]

	[if]
		{VARIABLE_CONDITIONAL unit.id not_equals $second_unit.id}
	[then]
	[if]
		{VARIABLE_CONDITIONAL vra.enemy_levelup equals yes}
	[then]
		{VARIABLE surrender_level 2}
	[/then]
	[else]
		{VARIABLE surrender_level 1}
	[/else]
	[/if]
	{VRA_GAME_SURRENDER_PERCENT}
	{VARIABLE check_level $unit.level}
	[if]
		{VARIABLE_CONDITIONAL check_level less_than_equal_to $surrender_level}
	[then]
		{VARIABLE_OP do_surrender rand "1..100"}
		[if]
			{VARIABLE_CONDITIONAL do_surrender less_than_equal_to $vra.game_surrender_percent}
		[then]
			{VARIABLE side_one 0}
			[if]
				{VARIABLE_CONDITIONAL unit.side numerical_equals 1}
			[then]
				{VARIABLE_OP side_one add 1}
			[/then]
			[/if]
			[if]
				{VARIABLE_CONDITIONAL second_unit.side numerical_equals 1}
			[then]
				{VARIABLE_OP side_one add 1}
			[/then]
			[/if]
			[if]
				{VARIABLE_CONDITIONAL side_one greater_than 0}
			[then]
			{VRA_RC_RANDOM_MESSAGE yield}
			[message]
				speaker=second_unit
				message=$dialog.yield[$random].message
			[/message]
			[message]
				speaker=unit
				message= _ "I yield!"
			[/message]
			{CLEAR_VARIABLE dialog.yield[$random].message,random}
			[/then]
			[/if]
			{CLEAR_VARIABLE side_one}

			{CLEAR_VARIABLE yield_unit}
			[store_unit]
				[filter]
					id=$unit.id
				[/filter]
				kill=yes
				variable=yield_unit
			[/store_unit]
			[set_variable]
				name=yield_unit.side
				value=$second_unit.side
			[/set_variable]

			{CLEAR_VARIABLE loyal_unit}
			[unit]
				type=$yield_unit.type
				side=$yield_unit.side
				x = $yield_unit.x
				y = $yield_unit.y
				facing = $yield_unit.facing
				name=$yield_unit.name
				gender=$yield_unit.gender
				random_traits=no
				moves=0
				attacks_left=0
				[modifications]
					{TRAIT_LOYAL}
				[/modifications]
				{IS_LOYAL}
				to_variable=loyal_unit
			[/unit]
			[if]
				{VARIABLE_CONDITIONAL yield_unit.status.poisoned not_equals $null}
			[then]
			[set_variable]
				name=loyal_unit.status.poisoned
				value=$yield_unit.status.poisoned
			[/set_variable]
			[/then]
			[/if]
			[if]
				{VARIABLE_CONDITIONAL yield_unit.status.slowed not_equals $null}
			[then]
			[set_variable]
				name=loyal_unit.status.slowed
				value=$yield_unit.status.slowed
			[/set_variable]
			[/then]
			[/if]
			[if]
				{VARIABLE_CONDITIONAL yield_unit.status.uncovered not_equals $null}
			[then]
			[set_variable]
				name=loyal_unit.status.uncovered
				value=$yield_unit.status.uncovered
			[/set_variable]
			[/then]
			[/if]
			{VRA_GAME_SURRENDER_HEALTH}
			[set_variable]
				name=loyal_unit.hitpoints
				multiply=$vra.game_surrender_health
			[/set_variable]
			[set_variable]
				name=loyal_unit.hitpoints
				divide=100
			[/set_variable]
			[set_variable]
				name=loyal_unit.hitpoints
				round=ceil
			[/set_variable]
			[capture_village]
				side=$loyal_unit.side
				terrain=*^V*
				[and]
					x,y=$loyal_unit.x,$loyal_unit.y
				[/and]
			[/capture_village]
			[unstore_unit]
				variable=loyal_unit
				find_vacant=no
				animate=yes
				text=_"Yield"
				fire_event=yes
			[/unstore_unit]
			{CLEAR_VARIABLE vra.game_surrender_health}
			{CLEAR_VARIABLE yield_unit}
			{CLEAR_VARIABLE loyal_unit}
		[/then]
		[/if]
		{CLEAR_VARIABLE do_surrender}
	[/then]
	[/if]
	{CLEAR_VARIABLE surrender_level}
	{CLEAR_VARIABLE check_level}
	{CLEAR_VARIABLE vra.game_surrender_percent}
	[/then]
	[/if]
[/event]

[event]
	name=die
	first_time_only=no
	[filter]
		canrecruit=no
	[/filter]
	[filter_second]
		[not]
		side=$unit.side
		[/not]
	[/filter_second]

	[if]
		{VARIABLE_CONDITIONAL unit.id not_equals $second_unit.id}
	[then]
	[gold]
		side=$second_unit.side
		amount=$unit.cost
	[/gold]


	[floating_text]
		#[filter]
		#	id=$second_unit.id
		#[/filter]
		x,y=$second_unit.x,$second_unit.y
		#x,y=$x2,$y2
		text= _ "$|$unit.cost|"
	[/floating_text]
	[delay]
		time=500
	[/delay]
	[/then]
	[/if]
[/event]

[event]
	name=start

	[store_side]
		team_name=GangTeam
		variable=temp_enemies
	[/store_side]

	[if]
		{VARIABLE_CONDITIONAL temp_enemies.length greater_than 1}
	[then]
		[message]
			side=1
			[and]
				canrecruit=yes
			[/and]
			message=_"They allied themselves against us!"
		[/message]
	[/then]
	[/if]
	{CLEAR_VARIABLE temp_enemies}

	[store_unit]
		[filter]
			[not]
				side=1
			[/not]
			[and]
				canrecruit=yes
			[/and]
			[and]
				[filter_side]
					#team_name=VaeliaTeam
					[allied_with]
						side=1
					[/allied_with]
					#[has_ally]
					#	side=1
					#[/has_ally]
				[/filter_side]
			[/and]
		[/filter]
		variable=temp_ally
	[/store_unit]

	[if]
		{VARIABLE_CONDITIONAL temp_ally.length greater_than 0}
	[then]
		[message]
			speaker=$temp_ally.id
			message= _ "We stand with you till the end!"
		[/message]

		[message]
			side=1
			[and]
				canrecruit=yes
			[/and]
			message=_"Aye, to the bitter end!"
		[/message]
	[/then]
	[/if]
	{CLEAR_VARIABLE temp_ally}

	[store_unit]
	[filter]
		canrecruit=yes
		[filter_side]
			[enemy_of]
				side=1
			[/enemy_of]
		[/filter_side]
	[/filter]
	variable=store_enemies
	[/store_unit]

	[foreach]
		array=store_enemies
		[do]
		{VRA_RC_RANDOM_MESSAGE start}
		[message]
			speaker=$this_item.id
			message=$dialog.start[$random].message
		[/message]
		{CLEAR_VARIABLE dialog.start[$random].message,random}
		[/do]
	[/foreach]
	{CLEAR_VARIABLE store_enemies}
[/event]

[event]
	name=last breath
	first_time_only=no

	[filter]
		[not]
			side=1
		[/not]
		[and]
			canrecruit=yes
		[/and]
		[and]
			[filter_side]
				#team_name=VaeliaTeam
				[allied_with]
					side=1
				[/allied_with]
				#[has_ally]
				#	side=1
				#[/has_ally]
			[/filter_side]
		[/and]
	[/filter]

	[if]
		{VARIABLE_CONDITIONAL unit.id equals $second_unit.id}
	[then]
		[message]
			speaker=unit
			message= _ "Goodbye, cruel world."
		[/message]
	[/then]
	[else]
	[message]
		speaker=unit
		message= _ "Gah! Avenge me Vaelia."
	[/message]
	[message]
		speaker=second_unit
		message= _ "We'll get to Vaelia, soon enough."
	[/message]
	[/else]
	[/if]
[/event]

[event]
	name=last breath
	first_time_only=no

	[filter]
		side=1
		[and]
			canrecruit=no
		[/and]
	[/filter]
	[filter_second]
		id=$unit.id
	[/filter_second]

	[if]
		{VARIABLE_CONDITIONAL unit.id equals $second_unit.id}
	[then]
		[message]
			speaker=unit
			message= _ "Oh no, I fall."
			sound=cave-in.ogg
		[/message]
	[/then]
	[/if]
[/event]

[event]
	name=moveto
	first_time_only=yes
	[filter]
		[not]
			side=1
		[/not]
		[and]
			canrecruit=no
		[/and]
		[and]
			[filter_side]
				#team_name=VaeliaTeam
				[allied_with]
					side=1
				[/allied_with]
				#[has_ally]
				#	side=1
				#[/has_ally]
			[/filter_side]
		[/and]
		[and]
			[filter_vision]
				side=1
			[/filter_vision]
		[/and]
	[/filter]

	[message]
		speaker=unit
		message=_"We've got this flank covered"
	[/message]
[/event]

[event]
	name=last_breath
	first_time_only=no

	[filter]
		canrecruit=yes
		[filter_side]
			[enemy_of]
				side=1
			[/enemy_of]
		[/filter_side]
	[/filter]

	[if]
		{VARIABLE_CONDITIONAL unit.id equals $second_unit.id}
	[then]
		[message]
			speaker=unit
			message= _ "Goodbye, cruel world."
		[/message]
	[/then]
	[else]
        {VRA_RC_RANDOM_MESSAGE last_breath}
	[message]
		speaker=second_unit
		message= _ "Die villain!"
	[/message]
	[message]
		speaker=$unit.id
		message=$dialog.last_breath[$random].message
	[/message]
	{CLEAR_VARIABLE dialog.last_breath[$random].message,random}
	[/else]
	[/if]
[/event]

#ifdef AVOID_KEEP
[event]
	name=moveto
	first_time_only=yes
	[filter]
		side=1
		x,y=25,25
	[/filter]
	[message]
		speaker=unit
		message= _ "This is sanctuary, I will be safe here."
	[/message]
[/event]
#endif

#ifdef AVOID_KEEP_LAVA
[event]
	name=moveto
	first_time_only=yes
	[filter]
		side=1
		x,y=25,25
	[/filter]
	[message]
		speaker=unit
		message= _ "This is sanctuary, I will be safe here."
	[/message]
[/event]
#endif
#enddef

#define VRA_PICKUPPABLE_ITEM ID X Y CAN_TAKE_FILTER_WML IMAGE TEXT TAKE_IT_STRING LEAVE_IT_STRING CANNOT_TAKE_TEXT OBJECT_WML
    # This places an item on the map which can be picked up once, but allows the
    # player to choose whether the unit stepping on it should take it or not.
    # The "object" doesn't necessarily need to be an [object], any action works.
    #
    # An example which shows the:
    # ! {PICKUPPABLE_ITEM ring_of_hp 8 12 race=human items/ring-red.png
    # !     _"$unit.name finds a pretty ring. Should he pick it up?"
    # !     _"ring of HP^Take it"
    # !     _"ring of HP^Leave it"
    # !     _"$unit.name finds a pretty ring. But only a human can take it!" (
    # !     [object]
    # !         name= _ "Ring of HP"
    # !         image=items/ring-red.png
    # !         description= _ "This ring grants the wearer +10 max hp!"
    # !
    # !         [effect]
    # !             apply_to=hitpoints
    # !             increase_total=10
    # !         [/effect]
    # !     [/object]
    # ! )}

    [item]
        x,y={X},{Y}
        image={IMAGE}
        visible_in_fog=no
    [/item]

    #[label]
    #    x,y={X},{Y}
    #    text={ID}
    #    visible_in_fog=no
    #[/label]

    [event]
        name=moveto
        first_time_only=no

        [filter]
            x,y={X},{Y}
        [/filter]

        [if]
            [have_unit]
                x,y={X},{Y}
                {CAN_TAKE_FILTER_WML}
            [/have_unit]

            [variable]
                name=item_{ID}_picked_up
                not_equals=yes
            [/variable]

            [then]
                [message]
                    speaker=narrator
                    message={TEXT}
                    image={IMAGE}

                    [option]
                        label={TAKE_IT_STRING}

                        [command]
                            {OBJECT_WML}

                            [remove_item]
                                x,y={X},{Y}
                                image={IMAGE}
                            [/remove_item]

                            [set_variable]
                                name=item_{ID}_picked_up
                                value=yes
                            [/set_variable]
                        [/command]
                    [/option]

                    [option]
                        label={LEAVE_IT_STRING}

                        [command]
                            [allow_undo]
                            [/allow_undo]
                        [/command]
                    [/option]
                [/message]
            [/then]

            [else]
                [if]
                    [variable]
                        name=item_{ID}_picked_up
                        not_equals=yes
                    [/variable]

                    [then]
                        [message]
                            speaker=narrator
                            message={CANNOT_TAKE_TEXT}
                            image={IMAGE}
                            side_for=$side_number
                            # the above is used to prevent an AI side from
                            # accidentally triggering this dialog
                        [/message]
                    [/then]
                [/if]

                [allow_undo]
                [/allow_undo]
            [/else]
        [/if]
    [/event]

    [event]
        name=victory

        [clear_variable]
            name=item_{ID}_picked_up
        [/clear_variable]
    [/event]
#enddef

#define VRA_RUSTY_NAIL_EFFECT X Y ID
        {VRA_GAME_RUSTY_NAIL}
        {VARIABLE_OP do_poison rand "1..100"}
        [if]
           {VARIABLE_CONDITIONAL do_poison less_than_equal_to $vra.game_rusty_nail}
        [then]
        [sound]
           name=goblin-hit-1.ogg
        [/sound]
        [message]
           speaker=$unit.id|
           message="Ouch! I've cut myself on a rusty nail. I don't feel too well."
        [/message]
        [store_unit]
            [filter]
                x,y={X},{Y}
            [/filter]
            variable=unitstats
        [/store_unit]
        [set_variable]
            name=unitstats.hitpoints
            multiply={ON_DIFFICULTY 10 20 30}
        [/set_variable]
        [set_variable]
            name=unitstats.hitpoints
            divide=100
        [/set_variable]
        [set_variable]
            name=unitstats.hitpoints
            round=floor
        [/set_variable]
        [harm_unit]
           [filter]
             x,y={X},{Y}
           [/filter]
           amount=$unitstats.hitpoints
           kill=no
           poisoned=yes
           animate=yes
        [/harm_unit]
        [clear_variable]
           name=harm_amount
        [/clear_variable]
        [clear_variable]
           name=unitstats
        [/clear_variable]
        [/then]
        [/if]
        {CLEAR_VARIABLE do_poison}
        {CLEAR_VARIABLE vra.game_rusty_nail}
#enddef

#define VRA_OBJ_CHEST_GOLD X Y ID
    {VRA_PICKUPPABLE_ITEM {ID} {X} {Y} (
	side=1
	) items/chest.png
    _"You found a chest!"
    _"chest^Open it"
    _"chest^Leave it"
    _"$unit.name has no need for this chest! Let another open it." (
        {VRA_RUSTY_NAIL_EFFECT {X} {Y} {ID}}
        {PLACE_IMAGE (items/chest-open.png) {X} {Y}}
        [sound]
          name=open-chest.wav
        [/sound]
        {VRA_LOOT {X} {Y} 20 15 10 1}
    )}
#enddef

#define VRA_OBJ_PLAIN_GOLD X Y ID
    {VRA_PICKUPPABLE_ITEM {ID} {X} {Y} (
	side=1
	) items/chest-plain-closed.png
    _"You found a plain chest!"
    _"plain chest^Open it"
    _"plain chest^Leave it"
    _"$unit.name has no need for this plain chest! Let another open it." (
        {VRA_RUSTY_NAIL_EFFECT {X} {Y} {ID}}
        {PLACE_IMAGE (items/chest-plain-open.png) {X} {Y}}
        [sound]
          name=open-chest.wav
        [/sound]
        {VRA_LOOT {X} {Y} 15 10 5 1}
    )}
#enddef

#define VRA_POT_EFFECT
#ifndef HARD
            [effect]
                apply_to=attack
                range=melee
                increase_damage={ON_DIFFICULTY 2 1 0}
            [/effect]
            [effect]
                apply_to=attack
                range=ranged
                increase_damage={ON_DIFFICULTY 2 1 0}
            [/effect]
            #[effect]
            #    apply_to=movement
            #    increase={ON_DIFFICULTY 2 1 0}
            #[/effect]
#endif
            [effect]
                apply_to=new_ability
                [abilities]
			[dummy] # ability type
				id=potion # ability
				name= _ "potion"
				female_name= _ "female^potion"
				description=_ "This unit is using a potion."
			[/dummy]
                [/abilities]
            [/effect]
#enddef

#define VRA_POT_HEAL X Y
#ifndef HARD
        [heal_unit]
            [filter]
                x,y={X},{Y}
            [/filter]
            amount=full
            restore_statuses=yes
            animate=yes
        [/heal_unit]
        [clear_variable]
           name=heal_amount
        [/clear_variable]
#endif
#enddef

#define VRA_OBJ_POTION_HOLY X Y ID
    {VRA_PICKUPPABLE_ITEM {ID} {X} {Y} (
        side=1
	[not]
		ability=potion
	[/not]
	[not]
        [has_attack]
            type=arcane
        [/has_attack]
	[/not]
    ) items/holy-water.png
    _"Sprinkling this water on melee and ranged weapons grants them the <i>arcane</i> damage type until the end of the current scenario. Should $unit.name use it?"
    _"holy water^Take it"
    _"holy water^Leave it"
    _"$unit.name has no need for this Holy Water! Let another take it." (
        [object]
            name= _ "Holy Water"
            image=items/holy-water.png
            duration=scenario
            description= _ "This water will make melee and ranged weapons have the <i>arcane</i> damage type until the end of the current scenario."
            [effect]
                apply_to=attack
                range=melee
                set_type=arcane
            [/effect]
            [effect]
                apply_to=attack
                range=ranged
                set_type=arcane
            [/effect]
            {VRA_POT_EFFECT}
        [/object]
        {VRA_POT_HEAL {X} {Y}}
        [unit_overlay]
            x={X}
            y={Y}
            ability=potion
            image=misc/holy-water-overlay.png
            object_id={ID}
        [/unit_overlay]
        [sound]
            name={SOUND_LIST:HOLY}
        [/sound]
    )}
#enddef

#define VRA_OBJ_POTION_FIRE X Y ID
    {VRA_PICKUPPABLE_ITEM {ID} {X} {Y} (
        side=1
	[not]
		ability=potion
	[/not]
	[not]
        [has_attack]
            type=fire
        [/has_attack]
	[/not]
    ) items/potion-red.png
    _"Sprinkling this potion on melee and ranged weapons grants them the <i>fire</i> damage type until the end of the current scenario. Should $unit.name use it?"
    _"potion of fire^Take it"
    _"potion of fire^Leave it"
    _"$unit.name has no need for this Potion of Fire! Let another take it." (
        [object]
            name= _ "Potion of Fire"
            image=items/potion-red.png
            duration=scenario
            description= _ "This potion will make melee and ranged weapons have the <i>fire</i> damage type until the end of the current scenario."
            [effect]
                apply_to=attack
                range=melee
                set_type=fire
            [/effect]
            [effect]
                apply_to=attack
                range=ranged
                set_type=fire
            [/effect]
            {VRA_POT_EFFECT}
        [/object]
        {VRA_POT_HEAL {X} {Y}}
        [unit_overlay]
            x={X}
            y={Y}
            ability=potion
            image=misc/potion-red-overlay.png
            object_id={ID}
        [/unit_overlay]
        [sound]
            name=potion.ogg
        [/sound]
    )}
#enddef

#define VRA_OBJ_POTION_COLD X Y ID
    {VRA_PICKUPPABLE_ITEM {ID} {X} {Y} (
        side=1
	[not]
		ability=potion
	[/not]
	[not]
        [has_attack]
            type=cold
        [/has_attack]
	[/not]
    ) items/potion-blue.png
    _"Sprinkling this potion on melee and ranged weapons grants them the <i>cold</i> damage type until the end of the current scenario. Should $unit.name use it?"
    _"potion of cold^Take it"
    _"potion of cold^Leave it"
    _"$unit.name has no need for this Potion of Cold! Let another take it." (
        [object]
            name= _ "Potion of Cold"
            image=items/potion-blue.png
            duration=scenario
            description= _ "This potion will make melee and ranged weapons have the <i>cold</i> damage type until the end of the current scenario."
            [effect]
                apply_to=attack
                range=melee
                set_type=cold
            [/effect]
            [effect]
                apply_to=attack
                range=ranged
                set_type=cold
            [/effect]
            {VRA_POT_EFFECT}
        [/object]
        {VRA_POT_HEAL {X} {Y}}
        [unit_overlay]
            x={X}
            y={Y}
            ability=potion
            image=misc/potion-blue-overlay.png
            object_id={ID}
        [/unit_overlay]
        [sound]
            name=potion.ogg
        [/sound]
    )}
#enddef

#define VRA_OBJ_POTION_REGN X Y ID
    {VRA_PICKUPPABLE_ITEM {ID} {X} {Y} (
	side=1
	[not]
		ability=potion
		#ability_type=potion
	[/not]
	[not]
		ability=regenerates
		#ability_type=regenerate
	[/not]
	) items/potion-green.png
    _"Drinking this potion will rejuvinate you!"
    _"potion of rejuvinate^Drink it"
    _"potion of rejuvinate^Leave it"
    _"$unit.name has no need for this Potion of Rejuvination! Let another take it." (
        [object]
            name= _ "Potion of Rejuvination"
            image=items/potion-green.png
            duration=scenario
            description= _ "You feel rejuvinated."
            [effect]
                apply_to=new_ability
                [abilities]
                    {ABILITY_REGENERATES}
                [/abilities]
            [/effect]
            {VRA_POT_EFFECT}
        [/object]
        {VRA_POT_HEAL {X} {Y}}
        [unit_overlay]
            x={X}
            y={Y}
            ability=potion
            image=misc/potion-green-overlay.png
            object_id={ID}
        [/unit_overlay]
        [sound]
            name=potion.ogg
        [/sound]
    )}
#enddef

#define VRA_REMOVE_OBJECT OID
	[remove_object]
		object_id={OID}
	[/remove_object]
#enddef

#define SCENE_OBJECTS

# delayed_variable_substitution=yes

{VRA_GET_SCATTER_LOCS (Gg,Gs,Gd,Hh,Hhd,Hd,Ha,Uh,Wwg,Ww,Wwt,Wwf,Uu,Uue,Aa,Ai,Dd,Ds,Rb,Re,Rd,Rr,Rrc,Rp,Ur,Ss,Sm) 2 30}

{VRA_OBJ_CHEST_GOLD  $scatter_arr.locs[0].x $scatter_arr.locs[0].y obj_loc_0}
{VRA_OBJ_PLAIN_GOLD  $scatter_arr.locs[1].x $scatter_arr.locs[1].y obj_loc_1}
{VRA_OBJ_POTION_REGN $scatter_arr.locs[2].x $scatter_arr.locs[2].y obj_loc_2}
{VRA_OBJ_POTION_FIRE $scatter_arr.locs[3].x $scatter_arr.locs[3].y obj_loc_3}
{VRA_OBJ_POTION_COLD $scatter_arr.locs[4].x $scatter_arr.locs[4].y obj_loc_4}
{VRA_OBJ_POTION_HOLY $scatter_arr.locs[5].x $scatter_arr.locs[5].y obj_loc_5}

#ifndef HARD
{VRA_OBJ_CHEST_GOLD  $scatter_arr.locs[6].x $scatter_arr.locs[6].y obj_loc_6}
{VRA_OBJ_PLAIN_GOLD  $scatter_arr.locs[7].x $scatter_arr.locs[7].y obj_loc_7}
{VRA_OBJ_POTION_REGN $scatter_arr.locs[8].x $scatter_arr.locs[8].y obj_loc_8}
{VRA_OBJ_POTION_FIRE $scatter_arr.locs[9].x $scatter_arr.locs[9].y obj_loc_9}
{VRA_OBJ_POTION_COLD $scatter_arr.locs[10].x $scatter_arr.locs[10].y obj_loc_10}
{VRA_OBJ_POTION_HOLY $scatter_arr.locs[11].x $scatter_arr.locs[11].y obj_loc_11}

{VRA_OBJ_CHEST_GOLD  $scatter_arr.locs[12].x $scatter_arr.locs[12].y obj_loc_12}
{VRA_OBJ_PLAIN_GOLD  $scatter_arr.locs[13].x $scatter_arr.locs[13].y obj_loc_13}
{VRA_OBJ_POTION_REGN $scatter_arr.locs[14].x $scatter_arr.locs[14].y obj_loc_14}
{VRA_OBJ_POTION_FIRE $scatter_arr.locs[15].x $scatter_arr.locs[15].y obj_loc_15}
{VRA_OBJ_POTION_COLD $scatter_arr.locs[16].x $scatter_arr.locs[16].y obj_loc_16}
{VRA_OBJ_POTION_HOLY $scatter_arr.locs[17].x $scatter_arr.locs[17].y obj_loc_17}
#endif

#ifdef EASY
{VRA_OBJ_CHEST_GOLD  $scatter_arr.locs[18].x $scatter_arr.locs[18].y obj_loc_18}
{VRA_OBJ_PLAIN_GOLD  $scatter_arr.locs[19].x $scatter_arr.locs[19].y obj_loc_19}
{VRA_OBJ_POTION_REGN $scatter_arr.locs[20].x $scatter_arr.locs[20].y obj_loc_20}
{VRA_OBJ_POTION_FIRE $scatter_arr.locs[21].x $scatter_arr.locs[21].y obj_loc_21}
{VRA_OBJ_POTION_COLD $scatter_arr.locs[22].x $scatter_arr.locs[22].y obj_loc_22}
{VRA_OBJ_POTION_HOLY $scatter_arr.locs[23].x $scatter_arr.locs[23].y obj_loc_23}

{VRA_OBJ_CHEST_GOLD  $scatter_arr.locs[24].x $scatter_arr.locs[24].y obj_loc_24}
{VRA_OBJ_PLAIN_GOLD  $scatter_arr.locs[25].x $scatter_arr.locs[25].y obj_loc_25}
{VRA_OBJ_POTION_REGN $scatter_arr.locs[26].x $scatter_arr.locs[26].y obj_loc_26}
{VRA_OBJ_POTION_FIRE $scatter_arr.locs[27].x $scatter_arr.locs[27].y obj_loc_27}
{VRA_OBJ_POTION_COLD $scatter_arr.locs[28].x $scatter_arr.locs[28].y obj_loc_28}
{VRA_OBJ_POTION_HOLY $scatter_arr.locs[29].x $scatter_arr.locs[29].y obj_loc_29}
#endif

# This didn't work
#[foreach]
#	array=debbie.locs
#	index_var=i
#	[do]
#		{VRA_OBJ_POTION_HOLY $debbie.locs[$i].x $debbie.locs[$i].y obj_holy_$debbie.locs[$i].count}
#	[/do]
#[/foreach]

[event]
	name=victory
	{VRA_REMOVE_OBJECT obj_loc_0}
	{VRA_REMOVE_OBJECT obj_loc_1}
	{VRA_REMOVE_OBJECT obj_loc_2}
	{VRA_REMOVE_OBJECT obj_loc_3}
	{VRA_REMOVE_OBJECT obj_loc_4}
	{VRA_REMOVE_OBJECT obj_loc_5}
	{VRA_REMOVE_OBJECT obj_loc_6}
	{VRA_REMOVE_OBJECT obj_loc_7}
	{VRA_REMOVE_OBJECT obj_loc_8}
	{VRA_REMOVE_OBJECT obj_loc_9}

	{VRA_REMOVE_OBJECT obj_loc_10}
	{VRA_REMOVE_OBJECT obj_loc_11}
	{VRA_REMOVE_OBJECT obj_loc_12}
	{VRA_REMOVE_OBJECT obj_loc_13}
	{VRA_REMOVE_OBJECT obj_loc_14}
	{VRA_REMOVE_OBJECT obj_loc_15}
	{VRA_REMOVE_OBJECT obj_loc_16}
	{VRA_REMOVE_OBJECT obj_loc_17}
	{VRA_REMOVE_OBJECT obj_loc_18}
	{VRA_REMOVE_OBJECT obj_loc_19}

	{VRA_REMOVE_OBJECT obj_loc_20}
	{VRA_REMOVE_OBJECT obj_loc_21}
	{VRA_REMOVE_OBJECT obj_loc_22}
	{VRA_REMOVE_OBJECT obj_loc_23}
	{VRA_REMOVE_OBJECT obj_loc_24}
	{VRA_REMOVE_OBJECT obj_loc_25}
	{VRA_REMOVE_OBJECT obj_loc_26}
	{VRA_REMOVE_OBJECT obj_loc_27}
	{VRA_REMOVE_OBJECT obj_loc_28}
	{VRA_REMOVE_OBJECT obj_loc_29}

	[remove_unit_overlay]
		side=1
		ability=potion
		image=misc/holy-water-overlay.png
	[/remove_unit_overlay]
	[remove_unit_overlay]
		side=1
		ability=potion
		image=misc/potion-blue-overlay.png
	[/remove_unit_overlay]
	[remove_unit_overlay]
		side=1
		ability=potion
		image=misc/potion-green-overlay.png
	[/remove_unit_overlay]
	[remove_unit_overlay]
		side=1
		ability=potion
		image=misc/potion-grey-overlay.png
	[/remove_unit_overlay]
	[remove_unit_overlay]
		side=1
		ability=potion
		image=misc/potion-poison-overlay.png
	[/remove_unit_overlay]
	[remove_unit_overlay]
		side=1
		ability=potion
		image=misc/potion-red-overlay.png
	[/remove_unit_overlay]
	[remove_unit_overlay]
		side=1
		ability=potion
		image=misc/potion-yellow-overlay.png
	[/remove_unit_overlay]

[/event]
#enddef

#define VRA_REG_ALLY_GANG_KILL
		{VRA_REG_ALLY_PERCENT}
		{VRA_REG_GANG_PERCENT}
		{VRA_REG_ENEMY_KILL_SIDE3}
		{VRA_REG_ENEMY_KILL_SIDE4}

		{VARIABLE vra_ally_percent $vra.reg_ally_percent}
		{VARIABLE vra_gang_percent $vra.reg_gang_percent}
		{VARIABLE vra_enemy_kill_side3 $vra.reg_enemy_kill_side3}
		{VARIABLE vra_enemy_kill_side4 $vra.reg_enemy_kill_side4}

		{VRA_ALLY_GANG_KILL}
#enddef

#define VRA_CLEAR_REG_ALLY_GANG_KILL
		{CLEAR_VARIABLE do_ally}
		{CLEAR_VARIABLE do_gang}
		{CLEAR_VARIABLE do_kill3}
		{CLEAR_VARIABLE do_kill4}
		{CLEAR_VARIABLE vra.reg_ally_percent}
		{CLEAR_VARIABLE vra.reg_gang_percent}
		{CLEAR_VARIABLE vra.reg_enemy_kill_side3}
		{CLEAR_VARIABLE vra.reg_enemy_kill_side4}
#enddef

#define VRA_CAVE_ALLY_GANG_KILL
		{VRA_CAVE_ALLY_PERCENT}
		{VRA_CAVE_GANG_PERCENT}
		{VRA_CAVE_ENEMY_KILL_SIDE3}
		{VRA_CAVE_ENEMY_KILL_SIDE4}

		{VARIABLE vra_ally_percent $vra.cave_ally_percent}
		{VARIABLE vra_gang_percent $vra.cave_gang_percent}
		{VARIABLE vra_enemy_kill_side3 $vra.cave_enemy_kill_side3}
		{VARIABLE vra_enemy_kill_side4 $vra.cave_enemy_kill_side4}

		{VRA_ALLY_GANG_KILL}
#enddef

#define VRA_CLEAR_CAVE_ALLY_GANG_KILL
		{CLEAR_VARIABLE do_ally}
		{CLEAR_VARIABLE do_gang}
		{CLEAR_VARIABLE do_kill3}
		{CLEAR_VARIABLE do_kill4}
		{CLEAR_VARIABLE vra.cave_ally_percent}
		{CLEAR_VARIABLE vra.cave_gang_percent}
		{CLEAR_VARIABLE vra.cave_enemy_kill_side3}
		{CLEAR_VARIABLE vra.cave_enemy_kill_side4}
#enddef

#define VRA_ALLY_GANG_KILL
		{VARIABLE_OP do_ally rand "1..100"}
		{VARIABLE_OP do_gang rand "1..100"}
		{VARIABLE_OP do_kill3 rand "1..100"}
		[if]
			{VARIABLE_CONDITIONAL do_kill4 equals $null}
		[then]
			{VARIABLE_OP do_kill4 rand "1..100"}
		[/then]
		[/if]

		{VARIABLE do_kills 0}

		[if]
		{VARIABLE_CONDITIONAL do_kill3 less_than_equal_to $vra_enemy_kill_side4}
		[then]
			{VARIABLE_OP do_kills add 1}
		[/then]
		[/if]
		[if]
		{VARIABLE_CONDITIONAL do_kill4 less_than_equal_to $vra_enemy_kill_side4}
		[then]
			{VARIABLE_OP do_kills add 1}
		[/then]
		[/if]

		[if]
			{VARIABLE_CONDITIONAL vra.round less_than_equal_to 2}
		[then]
			# first couple of round you face 1 side only
			{VARIABLE do_ally 110}
			{VARIABLE do_gang 110}
			{VARIABLE do_kill3 0}
			{VARIABLE do_kill4 0}
		[/then]
		[else]
			[if]
				{VARIABLE_CONDITIONAL do_gang greater_than $vra_gang_percent}
			[then]
				# no ally when there is infighting already
				{VARIABLE do_ally 110}
			[/then]
			[/if]
			[if]
				{VARIABLE_CONDITIONAL do_kills numerical_equals 2}
			[then]
				# no ally when there is only one side to face
				{VARIABLE do_ally 110}
				{VARIABLE do_gang 110}
			[/then]
			[/if]
		[/else]
		[/if]

		{CLEAR_VARIABLE do_kills}
		{CLEAR_VARIABLE vra_ally_percent}
		{CLEAR_VARIABLE vra_gang_percent}
		{CLEAR_VARIABLE vra_enemy_kill_side3}
		{CLEAR_VARIABLE vra_enemy_kill_side4}
#enddef
